!function(e){var n={};function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)t.d(o,r,function(n){return e[n]}.bind(null,r));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=3)}([function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.evalScore=n.countTurns=n.countStones=n.hasCandidates=n.putStone=n.reverse=n.cloneBoard=n.scanCandidates=n.newBoard=n.MAX_SCORE=n.MIN_SCORE=n.dirs=n.W=n.B=n.E=void 0;n.B=1;n.W=-1;n.E=0;const o=[[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]];n.dirs=o;n.MAX_SCORE=65;function r(e,n,t,o,r,c){const s=i(n);let d=0,l=t,u=o;for(;l+=r,u+=c,a(l,u);){const t=e[l][u];if(t!==s){if(t===n&&d>0)return!0;break}d++}return!1}function i(e){return-1*e}function a(e,n){return 0<=e&&e<8&&0<=n&&n<8}function c(e,n,t,o,r,i,a){for(let c=0;c<a;++c)o+=i,e[t+=r][o]=n}n.MIN_SCORE=-65,n.scanCandidates=function(e,n){const t=[];for(let i=0;i<8;++i)for(let a=0;a<8;++a)if(0===e[a][i])for(const c of o){const[o,s]=c;if(r(e,n,a,i,o,s)){t.push([[a,i],-65,0]);break}}return t},n.countStones=function(e,n){let t=0;for(let o=0;o<8;++o)for(let r=0;r<8;++r)e[o][r]===n&&++t;return t},n.countTurns=function(e){let n=0;for(let t=0;t<8;++t)for(let o=0;o<8;++o)0!==e[t][o]&&++n;return n-3},n.evalScore=function(e,n){let t=0;for(let o=0;o<8;++o)for(let r=0;r<8;++r){const i=e[o][r];i===n?++t:0!==i&&--t}return t},n.cloneBoard=function(e){const n=new Array(8);for(let t=0;t<8;++t){const o=e[t],r=new Array(8);for(let e=0;e<8;++e)r[e]=o[e];n[t]=r}return n},n.reverse=i,n.putStone=function(e,n,t,r){if(0!==e[t][r])return 0;let i=0;for(const s of o){const[o,d]=s;let l=0,u=t,h=r;for(;u+=o,h+=d,a(u,h);){const a=e[u][h];if(0===a)break;if(a===n){l>0&&(c(e,a,t,r,o,d,l),i+=l);break}l++}}return i>0&&(e[t][r]=n),i},n.hasCandidates=function(e,n){for(let t=0;t<8;++t)for(let r=0;r<8;++r)if(0===e[t][r])for(const i of o){const[o,c]=i;let s=1;for(;;){const i=t+o*s,d=r+c*s;if(!a(i,d))break;const l=e[i][d];if(0===l)break;if(l===n){if(s>1)return!0;break}s++}}return!1},n.newBoard=function(){const e=new Array(8);for(let n=0;n<e.length;++n)e[n]=new Array(8).fill(0);return e[3][3]=1,e[3][4]=-1,e[4][3]=-1,e[4][4]=1,e}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.candidateList=void 0;const o=t(0);function r(e,n,t,a){const c=o.reverse(n);let s=0,d=o.MIN_SCORE,l=o.cloneBoard(e);for(let u=0;u<8;++u)for(let h=0;h<8;++h){if(!(o.putStone(l,n,u,h)<=0)){if(t<=0){++s;const e=o.evalScore(l,n);if(e>a)return[e,s];d=Math.max(d,e)}else{const[e,u]=i(l,n,t-1,d);if(s+=u,e<o.MAX_SCORE){if(e>a)return[e,s];d=Math.max(d,e)}else{const[e,i]=r(l,n,t-1,a);if(s+=i,e>a)return[e,s];e>o.MIN_SCORE?d=Math.max(d,e):o.hasCandidates(l,n)||o.hasCandidates(l,c)||(d=Math.max(d,o.evalScore(l,n)),++s)}}l=o.cloneBoard(e)}}return[d,s]}function i(e,n,t,a){const c=o.reverse(n);let s=0,d=o.MAX_SCORE,l=o.cloneBoard(e);for(let u=0;u<8;++u)for(let h=0;h<8;++h){if(!(o.putStone(l,c,u,h)<=0)){if(t<=0){++s;const e=o.evalScore(l,n);if(e<a)return[e,s];d=Math.min(d,e)}else{const[e,u]=r(l,n,t-1,d);if(s+=u,e>o.MIN_SCORE){if(e<a)return[e,s];d=Math.min(d,e)}else{const[e,r]=i(l,n,t-1,a);s+=r,e<o.MAX_SCORE?d=Math.min(d,e):o.hasCandidates(l,n)||o.hasCandidates(l,c)||(d=Math.min(d,o.evalScore(l,n)),++s)}}l=o.cloneBoard(e)}}return[d,s]}n.candidateList=function(e,n,t=5){const a=o.reverse(n),c=[];let s=o.cloneBoard(e);for(let d=0;d<8;++d)for(let l=0;l<8;++l){if(!(o.putStone(s,n,d,l)<=0)){if(t<=0)c.push([[d,l],o.MIN_SCORE,1]);else{const[e,u]=i(s,n,t-1,o.MIN_SCORE);if(e<o.MAX_SCORE)c.push([[d,l],e,u]);else{const[e,i]=r(s,n,t-1,o.MIN_SCORE);e>o.MIN_SCORE?c.push([[d,l],e,i]):o.hasCandidates(s,n)||o.hasCandidates(s,a)||c.push([[d,l],o.evalScore(s,n),1])}}s=o.cloneBoard(e)}}return c}},function(e,n,t){"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=function(e,n){var t=e[1]||"",o=e[3];if(!o)return t;if(n&&"function"==typeof btoa){var r=(a=o,c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(s," */")),i=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([r]).join("\n")}var a,c,s;return[t].join("\n")}(n,e);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(r[a]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);o&&r[s[0]]||(t&&(s[2]?s[2]="".concat(t," and ").concat(s[2]):s[2]=t),n.push(s))}},n}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const o=t(4);t(7),window.addEventListener("DOMContentLoaded",()=>{!function(){const e=new o.Game;document.body.appendChild(e.div)}()})},function(e,n,t){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,n,t,o){void 0===o&&(o=t),Object.defineProperty(e,o,{enumerable:!0,get:function(){return n[t]}})}:function(e,n,t,o){void 0===o&&(o=t),e[o]=n[t]}),r=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.hasOwnProperty.call(e,t)&&o(n,e,t);return r(n,e),n};Object.defineProperty(n,"__esModule",{value:!0}),n.E=n.W=n.B=n.Game=void 0;const a=t(0);Object.defineProperty(n,"E",{enumerable:!0,get:function(){return a.E}}),Object.defineProperty(n,"B",{enumerable:!0,get:function(){return a.B}}),Object.defineProperty(n,"W",{enumerable:!0,get:function(){return a.W}});const c=i(t(1)),s=i(t(5)),d=i(t(6));function l(e,n,t){let o,r=a.MIN_SCORE,i=[];switch(t){case"mcts":o=s.candidateList(e,n);break;case"alphabeta":o=c.candidateList(e,n);break;case"greedy":o=d.candidateList(e,n);break;default:throw new Error}for(const e of o){const[n,t]=e;r<t?(r=t,i=[],i.push(n)):r==t&&i.push(n)}return i}function u(e,n,t){console.log("npc",t);const o=a.reverse(n);if(a.hasCandidates(e,n))for(;;){const r=l(e,n,t),i=r[Math.floor(Math.random()*r.length)];if(null==i)return void alert("illegal state 1");const[c,s]=i;if(a.putStone(e,n,c,s)<=0&&alert("illegal state 2"),a.hasCandidates(e,o)||!a.hasCandidates(e,n))break;alert("You must pass.")}else alert("NPC must pass.")}function h(e,n){setTimeout(()=>{const t=a.evalScore(e,n);0==t?alert("Draw"):t>0?alert("Win"):alert("Lose")},100)}n.Game=class{constructor(){this.scoringAlgorithm="mcts",this.npcAlgorithm="mcts",this.npcLightEnabled=!0,this.scoreVisible=!1,this.div=document.createElement("div"),this.board=a.newBoard(),this.stone=a.B,this.updateBoard(!0,this.scoreVisible)}updateBoard(e,n){const t=this.div;t.innerHTML="",t.appendChild(this.createBoardDom(e,n)),t.append(this.createInfoDom()),t.append(this.createScoreDom()),t.append(this.createControllerDom())}createControllerDom(){const e=document.createElement("table");{const n=document.createElement("tr"),t=document.createElement("label");t.innerHTML="Score",t.htmlFor="score-check";const o=document.createElement("th");o.appendChild(t),n.appendChild(o);const r=document.createElement("input");r.id="score-check",r.type="checkbox",r.onchange=()=>{r.checked?this.scoreVisible=!0:this.scoreVisible=!1,this.updateBoard(!0,this.scoreVisible)},r.checked=this.scoreVisible,r.className="control";const i=document.createElement("td");i.appendChild(r),n.appendChild(i);const a=document.createElement("select");a.id="score-algorithm";for(const e of["greedy","alphabeta","mcts"]){const n=document.createElement("option");n.innerHTML=e.toString(),n.value=e.toString(),a.appendChild(n),this.scoringAlgorithm==e&&(n.selected=!0)}a.onchange=()=>{for(const e of a.selectedOptions){this.scoringAlgorithm=e.value;break}console.log("algorithm: ",this.scoringAlgorithm),this.scoreVisible&&this.updateBoard(!0,this.scoreVisible)},a.className="control";const c=document.createElement("td");c.appendChild(a),n.appendChild(c),e.appendChild(n)}{const n=document.createElement("tr"),t=document.createElement("label");t.innerHTML="NPC",t.htmlFor="npc-check";const o=document.createElement("th");o.appendChild(t),n.appendChild(o);const r=document.createElement("input");r.id="npc-check",r.type="checkbox",r.onchange=()=>{r.checked?this.npcLightEnabled=!0:this.npcLightEnabled=!1},r.checked=this.npcLightEnabled,r.className="control";const i=document.createElement("td");i.appendChild(r),n.appendChild(i);const a=document.createElement("select");a.id="npc-algorithm";for(const e of["greedy","alphabeta","mcts"]){const n=document.createElement("option");n.innerHTML=e.toString(),n.value=e.toString(),a.appendChild(n),this.npcAlgorithm==e&&(n.selected=!0)}a.onchange=()=>{for(const e of a.selectedOptions){this.npcAlgorithm=e.value;break}console.log("algorithm: ",this.npcAlgorithm),this.scoreVisible&&this.updateBoard(!0,this.scoreVisible)},a.className="control";const c=document.createElement("td");c.appendChild(a),n.appendChild(c),e.appendChild(n)}{const n=document.createElement("tr"),t=document.createElement("th");n.appendChild(t);const o=document.createElement("input");o.type="button",o.value="Reset",o.onclick=()=>{this.board=a.newBoard(),this.stone=a.B,this.updateBoard(!0,this.scoreVisible)},o.className="control";const r=document.createElement("td");r.appendChild(o),n.appendChild(r),e.appendChild(n)}return e}createInfoDom(){const e=document.createElement("table");{const n=document.createElement("tr"),t=document.createElement("th");t.className="info",t.innerHTML="Next",n.appendChild(t);const o=document.createElement("th");o.className="info",o.innerHTML="Turn",n.appendChild(o);const r=document.createElement("th");r.className="info",r.innerHTML="Version",n.appendChild(r),e.appendChild(n)}{this.stone===a.E||a.hasCandidates(this.board,this.stone)||a.hasCandidates(this.board,a.reverse(this.stone))||(this.stone=a.E);const n=document.createElement("tr"),t=document.createElement("td");this.stone==a.B?(t.className="b info",t.innerHTML="●"):this.stone==a.W?(t.className="w info",t.innerHTML="●"):(t.innerHTML="Game End",t.className="info"),n.appendChild(t);const o=document.createElement("td");o.className="info";const r=a.countTurns(this.board);o.innerHTML=(r-3).toString(),n.appendChild(o);const i=document.createElement("td");i.className="info",i.innerHTML="0.1.1",n.appendChild(i),e.appendChild(n)}return e}createScoreDom(){const e=document.createElement("table");{const n=document.createElement("tr"),t=document.createElement("th");t.className="score",t.innerHTML="Name",n.appendChild(t);const o=document.createElement("th");o.className="score",o.innerHTML="Black",n.appendChild(o);const r=document.createElement("th");r.className="score",r.innerHTML="White",n.appendChild(r),e.appendChild(n)}const n=a.countStones(this.board,a.B),t=a.countStones(this.board,a.W);{const o=document.createElement("tr"),r=document.createElement("td");r.className="score",r.innerHTML="Stones",o.appendChild(r);const i=document.createElement("td");i.className="score",i.innerHTML=n.toString(),o.appendChild(i);const a=document.createElement("td");a.className="score",a.innerHTML=t.toString(),o.appendChild(a),e.appendChild(o)}{const o=document.createElement("tr"),r=document.createElement("td");r.className="score",r.innerHTML="Score",o.appendChild(r);const i=document.createElement("td");i.className="score",i.innerHTML=(n-t).toString(),o.appendChild(i);const a=document.createElement("td");a.className="score",a.innerHTML=(t-n).toString(),o.appendChild(a),e.appendChild(o)}return e}createBoardDom(e,n){const t=document.createElement("table");t.className="board";const o=this.stone;let r;if(n&&e)if(console.log("scoring",this.scoringAlgorithm),"mcts"===this.scoringAlgorithm)r=s.candidateList(this.board,o);else if("alphabeta"===this.scoringAlgorithm)r=c.candidateList(this.board,o);else{if("greedy"!==this.scoringAlgorithm)throw new Error("algorithm: "+this.scoringAlgorithm);r=d.candidateList(this.board,o)}else r=e?a.scanCandidates(this.board,o):[];let i=0,l=a.MIN_SCORE;for(const e of r){const[n,t,o]=e;l=Math.max(l,t),i+=o}for(let e=0;e<8;++e){const n=document.createElement("tr");n.className="board",t.appendChild(n);for(let t=0;t<8;++t){const i=document.createElement("td"),c=this.board[e][t];if(c===a.B)i.innerHTML="●",i.className="board b";else if(c==a.W)i.innerHTML="●",i.className="board w";else{i.className="board";let n=null;for(const o of r){const[r,i]=o[0];if(r===e&&i===t){n=o[1];break}}if(null!=n){const r=document.createElement("input");r.type="button",n==a.MIN_SCORE?(r.className="candidate",r.value=""):n==l?o===a.B?(r.className="best-candidate-b",r.value=Math.round(n).toString()):o===a.W&&(r.className="best-candidate-w",r.value=Math.round(n).toString()):o===a.B?(r.className="candidate-b",r.value=Math.round(n).toString()):o===a.W&&(r.className="candidate-w",r.value=Math.round(n).toString()),r.onclick=()=>{if(a.putStone(this.board,this.stone,e,t)<=0)return;this.updateBoard(!1,!1);const n=a.reverse(this.stone);if(!a.hasCandidates(this.board,this.stone)&&!a.hasCandidates(this.board,n))return this.stone=a.E,void h(this.board,o);this.updateBoard(!1,!1),setTimeout(()=>{this.npcLightEnabled?(u(this.board,n,this.npcAlgorithm),a.hasCandidates(this.board,this.stone)||(this.stone=a.E,h(this.board,o))):a.hasCandidates(this.board,n)?this.stone=n:a.hasCandidates(this.board,this.stone)||(this.stone=a.E),this.updateBoard(!0,this.scoreVisible)},10)},i.appendChild(r)}}n.appendChild(i)}}return t}}},function(e,n,t){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,n,t,o){void 0===o&&(o=t),Object.defineProperty(e,o,{enumerable:!0,get:function(){return n[t]}})}:function(e,n,t,o){void 0===o&&(o=t),e[o]=n[t]}),r=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.hasOwnProperty.call(e,t)&&o(n,e,t);return r(n,e),n};Object.defineProperty(n,"__esModule",{value:!0}),n.candidateList=void 0;const a=t(0),c=i(t(1));function s(e,n){const t=a.evalScore(e,n);return t>0?Math.log(t)/Math.log(a.MAX_SCORE):t<0?-Math.log(-t)/Math.log(a.MAX_SCORE):0}function d(e,n){const t=e.score,o=e.n;return t/n+Math.sqrt(2*Math.log2(n)/o)}function l(e,n){let t=a.scanCandidates(e,n);for(0===t.length&&(n=a.reverse(n),t=a.scanCandidates(e,n));t.length>0;){const o=Math.floor(t.length*Math.random()),[r]=t[o],[i,c]=r;if(a.putStone(e,n,i,c)<=0)throw new Error;n=a.reverse(n),t=a.scanCandidates(e,n),t.length>0||(n=a.reverse(n),t=a.scanCandidates(e,n))}}function u(e,n){const t=a.scanCandidates(e,n),o=a.reverse(n),r=[];for(const i of t){const[t,c]=i[0];let d=a.cloneBoard(e);if(a.putStone(d,n,t,c)<=0)throw new Error;l(a.cloneBoard(d),n);const u=s(d,n);r.push({board:d,stone:o,nodes:[],x:t,y:c,score:u,n:1})}return r}function h(e,n,t){if(0===e.length)throw new Error;const o=n,r=[];for(;e.length>0;){let i=-1,c=0;for(let n=0;n<e.length;++n)c+=e[n].n;if(n===o){let n=Number.NEGATIVE_INFINITY;for(let t=0;t<e.length;++t){const o=d(e[t],c);n<o&&(n=o,i=t)}}else{let n=Number.POSITIVE_INFINITY;for(let t=0;t<e.length;++t){const o=d(e[t],c);n>o&&(n=o,i=t)}}if(i<0)throw new Error;const s=e[i];r.push(s),n=s.stone,0===(e=s.nodes).length&&s.n>t&&(s.nodes=u(s.board,n),0==s.nodes.length&&(n=a.reverse(n),s.nodes=u(s.board,a.reverse(n)),n=a.reverse(n),s.stone=n),e=s.nodes)}const i=r[r.length-1],c=a.cloneBoard(i.board);l(c,n);const h=s(c,o);for(const e of r)e.score+=h,++e.n}n.candidateList=function(e,n,t=1e4,o=4){const r=u(e,n);if(0===r.length)return[];const i=a.countTurns(e);if(1===i)return c.candidateList(e,n,0);if(64-i<5)return c.candidateList(e,n,5);for(let e=0;e<t;++e)h(r,n,o);let s=0;const d=[];for(const e of r)d.push([[e.x,e.y],e.score/e.n,e.n]),s+=e.n;return d}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.candidateList=void 0;const o=t(0);n.candidateList=function(e,n){o.reverse(n);let t=o.cloneBoard(e),r=[];for(let i=0;i<8;++i)for(let a=0;a<8;++a){const c=o.putStone(t,n,i,a);c<=0||(r.push([[i,a],c,1]),t=o.cloneBoard(e))}return r}},function(e,n,t){var o=t(8),r=t(9);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var i={insert:"head",singleton:!1};o(r,i);e.exports=r.locals||{}},function(e,n,t){"use strict";var o,r=function(){return void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o},i=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),a=[];function c(e){for(var n=-1,t=0;t<a.length;t++)if(a[t].identifier===e){n=t;break}return n}function s(e,n){for(var t={},o=[],r=0;r<e.length;r++){var i=e[r],s=n.base?i[0]+n.base:i[0],d=t[s]||0,l="".concat(s," ").concat(d);t[s]=d+1;var u=c(l),h={css:i[1],media:i[2],sourceMap:i[3]};-1!==u?(a[u].references++,a[u].updater(h)):a.push({identifier:l,updater:m(h,n),references:1}),o.push(l)}return o}function d(e){var n=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var r=t.nc;r&&(o.nonce=r)}if(Object.keys(o).forEach((function(e){n.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(n);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}return n}var l,u=(l=[],function(e,n){return l[e]=n,l.filter(Boolean).join("\n")});function h(e,n,t,o){var r=t?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=u(n,r);else{var i=document.createTextNode(r),a=e.childNodes;a[n]&&e.removeChild(a[n]),a.length?e.insertBefore(i,a[n]):e.appendChild(i)}}function f(e,n,t){var o=t.css,r=t.media,i=t.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),i&&btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var A=null,p=0;function m(e,n){var t,o,r;if(n.singleton){var i=p++;t=A||(A=d(n)),o=h.bind(null,t,i,!1),r=h.bind(null,t,i,!0)}else t=d(n),o=f.bind(null,t,n),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return o(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;o(e=n)}else r()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=r());var t=s(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<t.length;o++){var r=c(t[o]);a[r].references--}for(var i=s(e,n),d=0;d<t.length;d++){var l=c(t[d]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}t=i}}}},function(e,n,t){"use strict";t.r(n);var o=t(2),r=t.n(o)()(!0);r.push([e.i,"body {\n    margin: 0;\n    overflow: hidden;\n    background-color: #AAA;\n}\n\ninput {\n    vertical-align: middle;\n}\n\n.control {\n    background-color: #CCC;\n    color: black;\n    border: solid 0;\n    font-size: 10pt;\n    vertical-align: middle;\n}\n\n.b {\n    color: #000;\n    font-size: 16pt;\n    text-align: center;\n}\n\n.w {\n    color: #fff;\n    font-size: 16pt;\n    text-align: center;\n}\n\n.candidate {\n    background-color: #090;\n    border: solid 0;\n    font-size: 12pt;\n    color: green;\n    width: 100%;\n    height: 100%;\n}\n\n.candidate-b {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #090;\n    width: 100%;\n    height: 100%;\n    color: #222;\n}\n.candidate-w {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #090;\n    width: 100%;\n    height: 100%;\n    color: #DDD;\n}\n\n.best-candidate-b {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #0B0;\n    width: 100%;\n    height: 100%;\n    color: #000;\n    font-weight: bold;\n}\n.best-candidate-w {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #0B0;\n    width: 100%;\n    height: 100%;\n    color: #fff;\n    font-weight: bold;\n}\n\nul {\n    list-style-type: none;\n}\n\n.score {\n    color: #000;\n}\n\ntable.board {\n    float: left;\n    padding: 0px;\n    margin: 5px;\n    border-collapse: none;\n    border-spacing: 0;\n}\n\ntr.board {\n    border-collapse: none;\n    border-spacing: 0;\n    padding: 0px;\n    margin: 0px;\n}\n\ntd.board {\n    width: 5;\n    height: 5;\n    padding: 0px;\n    margin: 1px;\n    width: 50px;\n    height: 50px;\n    background-color: green;\n    border: 1px solid #bbb;\n    text-align: center;\n}\n\nth.score, td.score {\n    width: 75px;\n    font-size: 10pt;\n    text-align: right;\n}\n\nth.info, td.info {\n    width: 75px;\n    font-size: 10pt;\n    text-align: right;\n}","",{version:3,sources:["style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,gBAAgB;IAChB,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;IACtB,YAAY;IACZ,eAAe;IACf,eAAe;IACf,sBAAsB;AAC1B;;AAEA;IACI,WAAW;IACX,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,sBAAsB;IACtB,eAAe;IACf,eAAe;IACf,YAAY;IACZ,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,eAAe;IACf,eAAe;IACf,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,WAAW;AACf;AACA;IACI,eAAe;IACf,eAAe;IACf,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,eAAe;IACf,eAAe;IACf,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,WAAW;IACX,iBAAiB;AACrB;AACA;IACI,eAAe;IACf,eAAe;IACf,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,WAAW;IACX,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;IACI,qBAAqB;IACrB,iBAAiB;IACjB,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,QAAQ;IACR,SAAS;IACT,YAAY;IACZ,WAAW;IACX,WAAW;IACX,YAAY;IACZ,uBAAuB;IACvB,sBAAsB;IACtB,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,eAAe;IACf,iBAAiB;AACrB",file:"style.css",sourcesContent:["body {\n    margin: 0;\n    overflow: hidden;\n    background-color: #AAA;\n}\n\ninput {\n    vertical-align: middle;\n}\n\n.control {\n    background-color: #CCC;\n    color: black;\n    border: solid 0;\n    font-size: 10pt;\n    vertical-align: middle;\n}\n\n.b {\n    color: #000;\n    font-size: 16pt;\n    text-align: center;\n}\n\n.w {\n    color: #fff;\n    font-size: 16pt;\n    text-align: center;\n}\n\n.candidate {\n    background-color: #090;\n    border: solid 0;\n    font-size: 12pt;\n    color: green;\n    width: 100%;\n    height: 100%;\n}\n\n.candidate-b {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #090;\n    width: 100%;\n    height: 100%;\n    color: #222;\n}\n.candidate-w {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #090;\n    width: 100%;\n    height: 100%;\n    color: #DDD;\n}\n\n.best-candidate-b {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #0B0;\n    width: 100%;\n    height: 100%;\n    color: #000;\n    font-weight: bold;\n}\n.best-candidate-w {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #0B0;\n    width: 100%;\n    height: 100%;\n    color: #fff;\n    font-weight: bold;\n}\n\nul {\n    list-style-type: none;\n}\n\n.score {\n    color: #000;\n}\n\ntable.board {\n    float: left;\n    padding: 0px;\n    margin: 5px;\n    border-collapse: none;\n    border-spacing: 0;\n}\n\ntr.board {\n    border-collapse: none;\n    border-spacing: 0;\n    padding: 0px;\n    margin: 0px;\n}\n\ntd.board {\n    width: 5;\n    height: 5;\n    padding: 0px;\n    margin: 1px;\n    width: 50px;\n    height: 50px;\n    background-color: green;\n    border: 1px solid #bbb;\n    text-align: center;\n}\n\nth.score, td.score {\n    width: 75px;\n    font-size: 10pt;\n    text-align: right;\n}\n\nth.info, td.info {\n    width: 75px;\n    font-size: 10pt;\n    text-align: right;\n}"]}]),n.default=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,