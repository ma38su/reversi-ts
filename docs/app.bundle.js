!function(n){var e={};function t(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return n[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=n,t.c=e,t.d=function(n,e,o){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:o})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)t.d(o,r,function(e){return n[e]}.bind(null,r));return o},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=4)}([function(n,e,t){"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=function(n,e){var t=n[1]||"",o=n[3];if(!o)return t;if(e&&"function"==typeof btoa){var r=(c=o,s=btoa(unescape(encodeURIComponent(JSON.stringify(c)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(a," */")),i=o.sources.map((function(n){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(n," */")}));return[t].concat(i).concat([r]).join("\n")}var c,s,a;return[t].join("\n")}(e,n);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,o){"string"==typeof n&&(n=[[null,n,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(r[c]=!0)}for(var s=0;s<n.length;s++){var a=[].concat(n[s]);o&&r[a[0]]||(t&&(a[2]?a[2]="".concat(t," and ").concat(a[2]):a[2]=t),e.push(a))}},e}},function(n,e,t){var o=t(2),r=t(3);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[n.i,r,""]]);var i={insert:"head",singleton:!1};o(r,i);n.exports=r.locals||{}},function(n,e,t){"use strict";var o,r=function(){return void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o},i=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),c=[];function s(n){for(var e=-1,t=0;t<c.length;t++)if(c[t].identifier===n){e=t;break}return e}function a(n,e){for(var t={},o=[],r=0;r<n.length;r++){var i=n[r],a=e.base?i[0]+e.base:i[0],l=t[a]||0,d="".concat(a," ").concat(l);t[a]=l+1;var A=s(d),h={css:i[1],media:i[2],sourceMap:i[3]};-1!==A?(c[A].references++,c[A].updater(h)):c.push({identifier:d,updater:m(h,e),references:1}),o.push(d)}return o}function l(n){var e=document.createElement("style"),o=n.attributes||{};if(void 0===o.nonce){var r=t.nc;r&&(o.nonce=r)}if(Object.keys(o).forEach((function(n){e.setAttribute(n,o[n])})),"function"==typeof n.insert)n.insert(e);else{var c=i(n.insert||"head");if(!c)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");c.appendChild(e)}return e}var d,A=(d=[],function(n,e){return d[n]=e,d.filter(Boolean).join("\n")});function h(n,e,t,o){var r=t?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(n.styleSheet)n.styleSheet.cssText=A(e,r);else{var i=document.createTextNode(r),c=n.childNodes;c[e]&&n.removeChild(c[e]),c.length?n.insertBefore(i,c[e]):n.appendChild(i)}}function u(n,e,t){var o=t.css,r=t.media,i=t.sourceMap;if(r?n.setAttribute("media",r):n.removeAttribute("media"),i&&btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=o;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(o))}}var f=null,p=0;function m(n,e){var t,o,r;if(e.singleton){var i=p++;t=f||(f=l(e)),o=h.bind(null,t,i,!1),r=h.bind(null,t,i,!0)}else t=l(e),o=u.bind(null,t,e),r=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return o(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;o(n=e)}else r()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=r());var t=a(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var o=0;o<t.length;o++){var r=s(t[o]);c[r].references--}for(var i=a(n,e),l=0;l<t.length;l++){var d=s(t[l]);0===c[d].references&&(c[d].updater(),c.splice(d,1))}t=i}}}},function(n,e,t){"use strict";t.r(e);var o=t(0),r=t.n(o)()(!0);r.push([n.i,"body {\n    margin: 0;\n    overflow: hidden;\n    background-color: #AAA;\n}\n\ninput {\n    vertical-align: middle;\n}\n\n.control {\n    background-color: #CCC;\n    color: black;\n    border: solid 0;\n    font-size: 10pt;\n    vertical-align: middle;\n}\n\n.b {\n    color: #000;\n    font-size: 16pt;\n    text-align: center;\n}\n\n.w {\n    color: #fff;\n    font-size: 16pt;\n    text-align: center;\n}\n\n.candidate {\n    background-color: #090;\n    border: solid 0;\n    font-size: 12pt;\n    color: green;\n    width: 100%;\n    height: 100%;\n}\n\n.candidate-b {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #090;\n    width: 100%;\n    height: 100%;\n    color: #222;\n}\n.candidate-w {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #090;\n    width: 100%;\n    height: 100%;\n    color: #DDD;\n}\n\n.best-candidate-b {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #0B0;\n    width: 100%;\n    height: 100%;\n    color: #000;\n    font-weight: bold;\n}\n.best-candidate-w {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #0B0;\n    width: 100%;\n    height: 100%;\n    color: #fff;\n    font-weight: bold;\n}\n\nul {\n    list-style-type: none;\n}\n\n.score {\n    color: #000;\n}\n\ntable.board {\n    float: left;\n    padding: 0px;\n    margin: 5px;\n    border-collapse: none;\n    border-spacing: 0;\n}\n\ntr.board {\n    border-collapse: none;\n    border-spacing: 0;\n    padding: 0px;\n    margin: 0px;\n}\n\ntd.board {\n    width: 5;\n    height: 5;\n    padding: 0px;\n    margin: 1px;\n    width: 50px;\n    height: 50px;\n    background-color: green;\n    border: 1px solid #bbb;\n    text-align: center;\n}\n\nth.score, td.score {\n    width: 75px;\n    font-size: 10pt;\n    text-align: right;\n}\n\nth.info, td.info {\n    width: 75px;\n    font-size: 10pt;\n    text-align: right;\n}","",{version:3,sources:["style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,gBAAgB;IAChB,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;IACtB,YAAY;IACZ,eAAe;IACf,eAAe;IACf,sBAAsB;AAC1B;;AAEA;IACI,WAAW;IACX,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,sBAAsB;IACtB,eAAe;IACf,eAAe;IACf,YAAY;IACZ,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,eAAe;IACf,eAAe;IACf,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,WAAW;AACf;AACA;IACI,eAAe;IACf,eAAe;IACf,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,eAAe;IACf,eAAe;IACf,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,WAAW;IACX,iBAAiB;AACrB;AACA;IACI,eAAe;IACf,eAAe;IACf,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,WAAW;IACX,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;IACI,qBAAqB;IACrB,iBAAiB;IACjB,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,QAAQ;IACR,SAAS;IACT,YAAY;IACZ,WAAW;IACX,WAAW;IACX,YAAY;IACZ,uBAAuB;IACvB,sBAAsB;IACtB,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,eAAe;IACf,iBAAiB;AACrB",file:"style.css",sourcesContent:["body {\n    margin: 0;\n    overflow: hidden;\n    background-color: #AAA;\n}\n\ninput {\n    vertical-align: middle;\n}\n\n.control {\n    background-color: #CCC;\n    color: black;\n    border: solid 0;\n    font-size: 10pt;\n    vertical-align: middle;\n}\n\n.b {\n    color: #000;\n    font-size: 16pt;\n    text-align: center;\n}\n\n.w {\n    color: #fff;\n    font-size: 16pt;\n    text-align: center;\n}\n\n.candidate {\n    background-color: #090;\n    border: solid 0;\n    font-size: 12pt;\n    color: green;\n    width: 100%;\n    height: 100%;\n}\n\n.candidate-b {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #090;\n    width: 100%;\n    height: 100%;\n    color: #222;\n}\n.candidate-w {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #090;\n    width: 100%;\n    height: 100%;\n    color: #DDD;\n}\n\n.best-candidate-b {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #0B0;\n    width: 100%;\n    height: 100%;\n    color: #000;\n    font-weight: bold;\n}\n.best-candidate-w {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #0B0;\n    width: 100%;\n    height: 100%;\n    color: #fff;\n    font-weight: bold;\n}\n\nul {\n    list-style-type: none;\n}\n\n.score {\n    color: #000;\n}\n\ntable.board {\n    float: left;\n    padding: 0px;\n    margin: 5px;\n    border-collapse: none;\n    border-spacing: 0;\n}\n\ntr.board {\n    border-collapse: none;\n    border-spacing: 0;\n    padding: 0px;\n    margin: 0px;\n}\n\ntd.board {\n    width: 5;\n    height: 5;\n    padding: 0px;\n    margin: 1px;\n    width: 50px;\n    height: 50px;\n    background-color: green;\n    border: 1px solid #bbb;\n    text-align: center;\n}\n\nth.score, td.score {\n    width: 75px;\n    font-size: 10pt;\n    text-align: right;\n}\n\nth.info, td.info {\n    width: 75px;\n    font-size: 10pt;\n    text-align: right;\n}"]}]),e.default=r},function(n,e,t){"use strict";t.r(e);const o=-1,r=[[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]];function i(n,e){const t=[];for(let o=0;o<8;++o)for(let i=0;i<8;++i)if(0==n[i][o])for(const s of r){const[r,a]=s;if(c(n,e,i,o,r,a)){t.push([[i,o],-65,0]);break}}return t}function c(n,e,t,o,r,i){const c=A(e);let s=0,a=t,l=o;for(;a+=r,l+=i,u(a,l);){const t=n[a][l];if(t!==c){if(t===e&&s>0)return!0;break}s++}return!1}function s(n,e){let t=0;for(let o=0;o<8;++o)for(let r=0;r<8;++r)n[o][r]==e&&++t;return t}function a(n){let e=0;for(let t=0;t<8;++t)for(let o=0;o<8;++o)0!==n[t][o]&&++e;return e-3}function l(n,e){let t=0;for(let o=0;o<8;++o)for(let r=0;r<8;++r){const i=n[o][r];i===e?++t:0!==i&&--t}return t}function d(n){const e=new Array(8);for(let t=0;t<8;++t){const o=n[t],r=new Array(8);for(let n=0;n<8;++n)r[n]=o[n];e[t]=r}return e}function A(n){return-1*n}function h(n,e,t,o){if(0!=n[t][o])return 0;let i=0;for(const c of r){const[r,s]=c;let a=0,l=t,d=o;for(;l+=r,d+=s,u(l,d);){const c=n[l][d];if(0===c)break;if(c===e){a>0&&(f(n,c,t,o,r,s,a),i+=a);break}a++}}return i>0&&(n[t][o]=e),i}function u(n,e){return 0<=n&&n<8&&0<=e&&e<8}function f(n,e,t,o,r,i,c){for(let s=0;s<c;++s)o+=i,n[t+=r][o]=e}function p(n,e){for(let t=0;t<8;++t)for(let o=0;o<8;++o)if(0==n[t][o])for(const i of r){const[r,c]=i;let s=1;for(;;){const i=t+r*s,a=o+c*s;if(!u(i,a))break;const l=n[i][a];if(0===l)break;if(l===e){if(s>1)return!0;break}s++}}return!1}function m(){const n=new Array(8);for(let e=0;e<n.length;++e)n[e]=new Array(8).fill(0);return n[3][3]=1,n[3][4]=o,n[4][3]=o,n[4][4]=1,n}function b(n,e,t){const o=A(e),r=[];let i=d(n);for(let c=0;c<8;++c)for(let s=0;s<8;++s){if(!(h(i,e,c,s)<=0)){if(t<=0)r.push([[c,s],-65,1]);else{const[n,a]=C(i,e,t-1,-65);if(n<65)r.push([[c,s],n,a]);else{const[n,a]=g(i,e,t-1,-65);n>-65?r.push([[c,s],n,a]):p(i,e)||p(i,o)||r.push([[c,s],l(i,e),1])}}i=d(n)}}return r}function g(n,e,t,o){const r=A(e);let i=0,c=-65,s=d(n);for(let a=0;a<8;++a)for(let A=0;A<8;++A){if(!(h(s,e,a,A)<=0)){if(t<=0){++i;const n=l(s,e);if(n>o)return[n,i];c=Math.max(c,n)}else{const[n,a]=C(s,e,t-1,c);if(i+=a,n<65){if(n>o)return[n,i];c=Math.max(c,n)}else{const[n,a]=g(s,e,t-1,o);if(i+=a,n>o)return[n,i];n>-65?c=Math.max(c,n):p(s,e)||p(s,r)||(c=Math.max(c,l(s,e)),++i)}}s=d(n)}}return[c,i]}function C(n,e,t,o){const r=A(e);let i=0,c=65,s=d(n);for(let a=0;a<8;++a)for(let A=0;A<8;++A){if(!(h(s,r,a,A)<=0)){if(t<=0){++i;const n=l(s,e);if(n<o)return[n,i];c=Math.min(c,n)}else{const[n,a]=g(s,e,t-1,c);if(i+=a,n>-65){if(n<o)return[n,i];c=Math.min(c,n)}else{const[n,a]=C(s,e,t-1,o);i+=a,n<65?c=Math.min(c,n):p(s,e)||p(s,r)||(c=Math.min(c,l(s,e)),++i)}}s=d(n)}}return[c,i]}function I(n,e){const t=n.score,o=n.n;return t/e+Math.sqrt(2*Math.log2(e)/o)}function B(n,e){let t=i(n,e);for(0==t.length&&(t=i(n,e=A(e)));t.length>0;){const o=Math.floor(t.length*Math.random()),[r]=t[o],[c,s]=r;if(h(n,e,c,s)<=0)throw new Error;t=i(n,e=A(e)),t.length>0||(t=i(n,e=A(e)))}}function E(n,e){const t=i(n,e),o=A(e),r=[];for(const i of t){const[t,c]=i[0];let s=d(n);if(h(s,e,t,c)<=0)throw new Error;B(d(s),e);const a=l(s,e);r.push({board:s,stone:o,nodes:[],x:t,y:c,score:a,n:1})}return r}function v(n,e){if(0==n.length)throw new Error;const t=e,o=[];for(;n.length>0;){let r=-1,i=0;for(let e=0;e<n.length;++e)i+=n[e].n;if(e===t){let e=Number.NEGATIVE_INFINITY;for(let t=0;t<n.length;++t){const o=I(n[t],i);e<o&&(e=o,r=t)}}else{let e=Number.POSITIVE_INFINITY;for(let t=0;t<n.length;++t){const o=I(n[t],i);e>o&&(e=o,r=t)}}if(r<0)throw new Error;const c=n[r];o.push(c),e=c.stone,0==(n=c.nodes).length&&c.n>4&&(c.nodes=E(c.board,e),0==c.nodes.length&&(e=A(e),c.nodes=E(c.board,A(e)),e=A(e),c.stone=e),n=c.nodes)}const r=d(o[o.length-1].board);B(r,e);const i=l(r,t);for(const n of o)n.score+=i,++n.n}function w(n,e){const t=E(n,e);if(0==t.length)return[];const o=a(n);if(1==o)return b(n,e,0);if(64-o<=5)return console.log("algorithm -> alpha-beta"),b(n,e,5);t.sort((n,e)=>{const t=n.x-e.x;return 0!==t?t:n.y-e.y});for(let n=0;n<2e4;++n)v(t,e);let r=0;const i=[];for(const n of t)i.push([[n.x,n.y],n.score/n.n,n.n]),r+=n.n;return i}function x(n,e,t){let o=-65,r=[];const i=b(n,e,5);for(const n of i){const[e,t]=n;o<t?(o=t,r=[],r.push(e)):o==t&&r.push(e)}return r[Math.floor(Math.random()*r.length)]}function M(n,e,t){console.log("npc",t);const o=A(e);if(p(n,e))for(;;){const t=x(n,e);if(!t)return void alert("illegal state 1");const[r,i]=t;if(h(n,e,r,i)<=0&&alert("illegal state 2"),p(n,o)||!p(n,e))break;alert("You must pass.")}else alert("NPC must pass.")}function y(n,e){setTimeout(()=>{const t=l(n,e);0==t?alert("Draw"):t>0?alert("Win"):alert("Lose")},100)}class k{constructor(){this.scoringAlgorithm="mcts",this.npcAlgorithm="alphabeta",this.yourStone=1,this.npcEnabled=!0,this.searchDepth=5,this.scoreVisible=!0,this.div=document.createElement("div"),this.board=m(),this.stone=1,this.updateBoard(!0,this.scoreVisible)}updateBoard(n,e){const t=this.div;t.innerHTML="",t.appendChild(this.createBoardDom(n,e)),t.append(this.createInfoDom()),t.append(this.createScoreDom()),t.append(this.createControllerDom())}createControllerDom(){const n=document.createElement("table");{const e=document.createElement("tr"),t=document.createElement("label");t.innerHTML="Score",t.htmlFor="score-check";const o=document.createElement("th");o.appendChild(t),e.appendChild(o);const r=document.createElement("input");r.id="score-check",r.type="checkbox",r.onchange=()=>{r.checked?this.scoreVisible=!0:this.scoreVisible=!1,this.updateBoard(!0,this.scoreVisible)},r.checked=this.scoreVisible,r.className="control";const i=document.createElement("td");i.appendChild(r),e.appendChild(i);const c=document.createElement("select");c.id="score-algorithm";for(const n of["alphabeta","mcts"]){const e=document.createElement("option");e.innerHTML=n.toString(),e.value=n.toString(),c.appendChild(e),this.scoringAlgorithm==n&&(e.selected=!0)}c.onchange=()=>{for(const n of c.selectedOptions){this.scoringAlgorithm=n.value;break}console.log("algorithm: ",this.scoringAlgorithm),this.scoreVisible&&this.updateBoard(!0,this.scoreVisible)},c.className="control";const s=document.createElement("td");s.appendChild(c),e.appendChild(s),n.appendChild(e)}{const e=document.createElement("tr"),t=document.createElement("label");t.innerHTML="NPC",t.htmlFor="npc-check";const o=document.createElement("th");o.appendChild(t),e.appendChild(o);const r=document.createElement("input");r.id="npc-check",r.type="checkbox",r.onchange=()=>{r.checked?this.npcEnabled=!0:this.npcEnabled=!1},r.checked=this.npcEnabled,r.className="control";const i=document.createElement("td");i.appendChild(r),e.appendChild(i);const c=document.createElement("select");c.id="score-algorithm";for(const n of["alphabeta","mcts"]){const e=document.createElement("option");e.innerHTML=n.toString(),e.value=n.toString(),c.appendChild(e),this.npcAlgorithm==n&&(e.selected=!0)}c.onchange=()=>{for(const n of c.selectedOptions){this.npcAlgorithm=n.value;break}console.log("algorithm: ",this.npcAlgorithm),this.scoreVisible&&this.updateBoard(!0,this.scoreVisible)},c.className="control";const s=document.createElement("td");s.appendChild(c),e.appendChild(s),n.appendChild(e)}{const e=document.createElement("tr"),t=document.createElement("th");e.appendChild(t);const o=document.createElement("input");o.type="button",o.value="Reset",o.onclick=()=>{this.board=m(),this.stone=1,this.updateBoard(!0,this.scoreVisible)},o.className="control";const r=document.createElement("td");r.appendChild(o),e.appendChild(r),n.appendChild(e)}return n}createInfoDom(){const n=document.createElement("table");{const e=document.createElement("tr"),t=document.createElement("th");t.className="info",t.innerHTML="Next",e.appendChild(t);const o=document.createElement("th");o.className="info",o.innerHTML="Turn",e.appendChild(o),n.appendChild(e)}{0===this.stone||p(this.board,this.stone)||p(this.board,A(this.stone))||(this.stone=0);const e=document.createElement("tr"),t=document.createElement("td");1==this.stone?(t.className="b info",t.innerHTML="●"):this.stone==o?(t.className="w info",t.innerHTML="●"):(t.innerHTML="Game End",t.className="info"),e.appendChild(t);const r=document.createElement("td");r.className="info";const i=a(this.board);r.innerHTML=(i-3).toString(),e.appendChild(r),n.appendChild(e)}return n}createScoreDom(){const n=document.createElement("table");{const e=document.createElement("tr"),t=document.createElement("th");t.className="score",t.innerHTML="Name",e.appendChild(t);const o=document.createElement("th");o.className="score",o.innerHTML="Black",e.appendChild(o);const r=document.createElement("th");r.className="score",r.innerHTML="White",e.appendChild(r),n.appendChild(e)}const e=s(this.board,1),t=s(this.board,o);{const o=document.createElement("tr"),r=document.createElement("td");r.className="score",r.innerHTML="Stones",o.appendChild(r);const i=document.createElement("td");i.className="score",i.innerHTML=e.toString(),o.appendChild(i);const c=document.createElement("td");c.className="score",c.innerHTML=t.toString(),o.appendChild(c),n.appendChild(o)}{const o=document.createElement("tr"),r=document.createElement("td");r.className="score",r.innerHTML="Score",o.appendChild(r);const i=document.createElement("td");i.className="score",i.innerHTML=(e-t).toString(),o.appendChild(i);const c=document.createElement("td");c.className="score",c.innerHTML=(t-e).toString(),o.appendChild(c),n.appendChild(o)}return n}createBoardDom(n,e){const t=this.yourStone,r=document.createElement("table");r.className="board";const c=this.stone;let s;if(e&&n)if(console.log("scoring",this.scoringAlgorithm),"mcts"===this.scoringAlgorithm)s=w(this.board,c);else{if("alphabeta"!==this.scoringAlgorithm)throw new Error("algorithm: "+this.scoringAlgorithm);s=b(this.board,c,this.searchDepth)}else s=n?i(this.board,c):[];let a=0,l=-65;for(const n of s){const[e,t,o]=n;l=Math.max(l,t),a+=o}for(let n=0;n<8;++n){const e=document.createElement("tr");e.className="board",r.appendChild(e);for(let r=0;r<8;++r){const i=document.createElement("td"),a=this.board[n][r];if(1===a)i.innerHTML="●",i.className="board b";else if(a==o)i.innerHTML="●",i.className="board w";else{i.className="board";let e=null;for(const t of s){const[o,i]=t[0];if(o===n&&i===r){e=t[1];break}}if(null!=e){const s=document.createElement("input");s.type="button",-65==e?(s.className="candidate",s.value=""):e==l?1===c?(s.className="best-candidate-b",s.value=Math.round(e).toString()):c===o&&(s.className="best-candidate-w",s.value=Math.round(e).toString()):1===c?(s.className="candidate-b",s.value=Math.round(e).toString()):c===o&&(s.className="candidate-w",s.value=Math.round(e).toString()),s.onclick=()=>{if(h(this.board,this.stone,n,r)<=0)return;this.updateBoard(!1,!1);const e=A(this.stone);if(!p(this.board,this.stone)&&!p(this.board,e))return this.stone=0,void y(this.board,t);this.updateBoard(!1,!1),setTimeout(()=>{this.npcEnabled?(M(this.board,e,this.npcAlgorithm),p(this.board,this.stone)||(this.stone=0,y(this.board,t))):p(this.board,e)?this.stone=e:p(this.board,this.stone)||(this.stone=0),this.updateBoard(!0,this.scoreVisible)},10)},i.appendChild(s)}}e.appendChild(i)}}return r}}t(1);window.addEventListener("DOMContentLoaded",()=>{!function(){const n=new k;document.body.appendChild(n.div)}()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,