!function(n){var e={};function t(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return n[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=n,t.c=e,t.d=function(n,e,o){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:o})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)t.d(o,r,function(e){return n[e]}.bind(null,r));return o},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=4)}([function(n,e,t){"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=function(n,e){var t=n[1]||"",o=n[3];if(!o)return t;if(e&&"function"==typeof btoa){var r=(c=o,s=btoa(unescape(encodeURIComponent(JSON.stringify(c)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(a," */")),i=o.sources.map((function(n){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(n," */")}));return[t].concat(i).concat([r]).join("\n")}var c,s,a;return[t].join("\n")}(e,n);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,o){"string"==typeof n&&(n=[[null,n,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(r[c]=!0)}for(var s=0;s<n.length;s++){var a=[].concat(n[s]);o&&r[a[0]]||(t&&(a[2]?a[2]="".concat(t," and ").concat(a[2]):a[2]=t),e.push(a))}},e}},function(n,e,t){var o=t(2),r=t(3);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[n.i,r,""]]);var i={insert:"head",singleton:!1};o(r,i);n.exports=r.locals||{}},function(n,e,t){"use strict";var o,r=function(){return void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o},i=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),c=[];function s(n){for(var e=-1,t=0;t<c.length;t++)if(c[t].identifier===n){e=t;break}return e}function a(n,e){for(var t={},o=[],r=0;r<n.length;r++){var i=n[r],a=e.base?i[0]+e.base:i[0],l=t[a]||0,d="".concat(a," ").concat(l);t[a]=l+1;var A=s(d),h={css:i[1],media:i[2],sourceMap:i[3]};-1!==A?(c[A].references++,c[A].updater(h)):c.push({identifier:d,updater:m(h,e),references:1}),o.push(d)}return o}function l(n){var e=document.createElement("style"),o=n.attributes||{};if(void 0===o.nonce){var r=t.nc;r&&(o.nonce=r)}if(Object.keys(o).forEach((function(n){e.setAttribute(n,o[n])})),"function"==typeof n.insert)n.insert(e);else{var c=i(n.insert||"head");if(!c)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");c.appendChild(e)}return e}var d,A=(d=[],function(n,e){return d[n]=e,d.filter(Boolean).join("\n")});function h(n,e,t,o){var r=t?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(n.styleSheet)n.styleSheet.cssText=A(e,r);else{var i=document.createTextNode(r),c=n.childNodes;c[e]&&n.removeChild(c[e]),c.length?n.insertBefore(i,c[e]):n.appendChild(i)}}function u(n,e,t){var o=t.css,r=t.media,i=t.sourceMap;if(r?n.setAttribute("media",r):n.removeAttribute("media"),i&&btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=o;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(o))}}var f=null,p=0;function m(n,e){var t,o,r;if(e.singleton){var i=p++;t=f||(f=l(e)),o=h.bind(null,t,i,!1),r=h.bind(null,t,i,!0)}else t=l(e),o=u.bind(null,t,e),r=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return o(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;o(n=e)}else r()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=r());var t=a(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var o=0;o<t.length;o++){var r=s(t[o]);c[r].references--}for(var i=a(n,e),l=0;l<t.length;l++){var d=s(t[l]);0===c[d].references&&(c[d].updater(),c.splice(d,1))}t=i}}}},function(n,e,t){"use strict";t.r(e);var o=t(0),r=t.n(o)()(!0);r.push([n.i,"body {\n    margin: 0;\n    overflow: hidden;\n    background-color: #AAA;\n}\n\ninput {\n    vertical-align: middle;\n}\n\n.control {\n    background-color: #CCC;\n    color: black;\n    border: solid 0;\n    font-size: 10pt;\n    vertical-align: middle;\n}\n\n.b {\n    color: #000;\n    font-size: 16pt;\n    text-align: center;\n}\n\n.w {\n    color: #fff;\n    font-size: 16pt;\n    text-align: center;\n}\n\n.candidate {\n    background-color: #090;\n    border: solid 0;\n    font-size: 12pt;\n    color: green;\n    width: 100%;\n    height: 100%;\n}\n\n.candidate-b {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #090;\n    width: 100%;\n    height: 100%;\n    color: #222;\n}\n.candidate-w {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #090;\n    width: 100%;\n    height: 100%;\n    color: #DDD;\n}\n\n.best-candidate-b {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #0B0;\n    width: 100%;\n    height: 100%;\n    color: #000;\n    font-weight: bold;\n}\n.best-candidate-w {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #0B0;\n    width: 100%;\n    height: 100%;\n    color: #fff;\n    font-weight: bold;\n}\n\nul {\n    list-style-type: none;\n}\n\n.score {\n    color: #000;\n}\n\ntable.board {\n    float: left;\n    padding: 0px;\n    margin: 5px;\n    border-collapse: none;\n    border-spacing: 0;\n}\n\ntr.board {\n    border-collapse: none;\n    border-spacing: 0;\n    padding: 0px;\n    margin: 0px;\n}\n\ntd.board {\n    width: 5;\n    height: 5;\n    padding: 0px;\n    margin: 1px;\n    width: 50px;\n    height: 50px;\n    background-color: green;\n    border: 1px solid #bbb;\n    text-align: center;\n}\n\nth.score, td.score {\n    width: 75px;\n    font-size: 10pt;\n    text-align: right;\n}\n\nth.info, td.info {\n    width: 75px;\n    font-size: 10pt;\n    text-align: right;\n}","",{version:3,sources:["style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,gBAAgB;IAChB,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;IACtB,YAAY;IACZ,eAAe;IACf,eAAe;IACf,sBAAsB;AAC1B;;AAEA;IACI,WAAW;IACX,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,sBAAsB;IACtB,eAAe;IACf,eAAe;IACf,YAAY;IACZ,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,eAAe;IACf,eAAe;IACf,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,WAAW;AACf;AACA;IACI,eAAe;IACf,eAAe;IACf,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,eAAe;IACf,eAAe;IACf,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,WAAW;IACX,iBAAiB;AACrB;AACA;IACI,eAAe;IACf,eAAe;IACf,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,WAAW;IACX,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;IACI,qBAAqB;IACrB,iBAAiB;IACjB,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,QAAQ;IACR,SAAS;IACT,YAAY;IACZ,WAAW;IACX,WAAW;IACX,YAAY;IACZ,uBAAuB;IACvB,sBAAsB;IACtB,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,eAAe;IACf,iBAAiB;AACrB",file:"style.css",sourcesContent:["body {\n    margin: 0;\n    overflow: hidden;\n    background-color: #AAA;\n}\n\ninput {\n    vertical-align: middle;\n}\n\n.control {\n    background-color: #CCC;\n    color: black;\n    border: solid 0;\n    font-size: 10pt;\n    vertical-align: middle;\n}\n\n.b {\n    color: #000;\n    font-size: 16pt;\n    text-align: center;\n}\n\n.w {\n    color: #fff;\n    font-size: 16pt;\n    text-align: center;\n}\n\n.candidate {\n    background-color: #090;\n    border: solid 0;\n    font-size: 12pt;\n    color: green;\n    width: 100%;\n    height: 100%;\n}\n\n.candidate-b {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #090;\n    width: 100%;\n    height: 100%;\n    color: #222;\n}\n.candidate-w {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #090;\n    width: 100%;\n    height: 100%;\n    color: #DDD;\n}\n\n.best-candidate-b {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #0B0;\n    width: 100%;\n    height: 100%;\n    color: #000;\n    font-weight: bold;\n}\n.best-candidate-w {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #0B0;\n    width: 100%;\n    height: 100%;\n    color: #fff;\n    font-weight: bold;\n}\n\nul {\n    list-style-type: none;\n}\n\n.score {\n    color: #000;\n}\n\ntable.board {\n    float: left;\n    padding: 0px;\n    margin: 5px;\n    border-collapse: none;\n    border-spacing: 0;\n}\n\ntr.board {\n    border-collapse: none;\n    border-spacing: 0;\n    padding: 0px;\n    margin: 0px;\n}\n\ntd.board {\n    width: 5;\n    height: 5;\n    padding: 0px;\n    margin: 1px;\n    width: 50px;\n    height: 50px;\n    background-color: green;\n    border: 1px solid #bbb;\n    text-align: center;\n}\n\nth.score, td.score {\n    width: 75px;\n    font-size: 10pt;\n    text-align: right;\n}\n\nth.info, td.info {\n    width: 75px;\n    font-size: 10pt;\n    text-align: right;\n}"]}]),e.default=r},function(n,e,t){"use strict";t.r(e);const o=-1,r=[[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]];function i(n,e){const t=[];for(let o=0;o<8;++o)for(let i=0;i<8;++i)if(0==n[i][o])for(const s of r){const[r,a]=s;if(c(n,e,i,o,r,a)){t.push([[i,o],-65,0]);break}}return t}function c(n,e,t,o,r,i){const c=A(e);let s=0,a=t,l=o;for(;a+=r,l+=i,u(a,l);){const t=n[a][l];if(t!==c){if(t===e&&s>0)return!0;break}s++}return!1}function s(n,e){let t=0;for(let o=0;o<8;++o)for(let r=0;r<8;++r)n[o][r]==e&&++t;return t}function a(n){let e=0;for(let t=0;t<8;++t)for(let o=0;o<8;++o)0!==n[t][o]&&++e;return e-3}function l(n,e){let t=0;for(let o=0;o<8;++o)for(let r=0;r<8;++r){const i=n[o][r];i===e?++t:0!==i&&--t}return t}function d(n){const e=new Array(8);for(let t=0;t<8;++t){const o=n[t],r=new Array(8);for(let n=0;n<8;++n)r[n]=o[n];e[t]=r}return e}function A(n){return-1*n}function h(n,e,t,o){if(0!=n[t][o])return 0;let i=0;for(const c of r){const[r,s]=c;let a=0,l=t,d=o;for(;l+=r,d+=s,u(l,d);){const c=n[l][d];if(0===c)break;if(c===e){a>0&&(f(n,c,t,o,r,s,a),i+=a);break}a++}}return i>0&&(n[t][o]=e),i}function u(n,e){return 0<=n&&n<8&&0<=e&&e<8}function f(n,e,t,o,r,i,c){for(let s=0;s<c;++s)o+=i,n[t+=r][o]=e}function p(n,e){for(let t=0;t<8;++t)for(let o=0;o<8;++o)if(0==n[t][o])for(const i of r){const[r,c]=i;let s=1;for(;;){const i=t+r*s,a=o+c*s;if(!u(i,a))break;const l=n[i][a];if(0===l)break;if(l===e){if(s>1)return!0;break}s++}}return!1}function m(){const n=new Array(8);for(let e=0;e<n.length;++e)n[e]=new Array(8).fill(0);return n[3][3]=1,n[3][4]=o,n[4][3]=o,n[4][4]=1,n}function b(n,e,t){const o=A(e),r=[];let i=d(n);for(let c=0;c<8;++c)for(let s=0;s<8;++s){if(!(h(i,e,c,s)<=0)){if(t<=0)r.push([[c,s],-65,1]);else{const[n,a]=C(i,e,t-1,-65);if(n<65)r.push([[c,s],n,a]);else{const[n,a]=g(i,e,t-1,-65);n>-65?r.push([[c,s],n,a]):p(i,e)||p(i,o)||r.push([[c,s],l(i,e),1])}}i=d(n)}}return r}function g(n,e,t,o){const r=A(e);let i=0,c=-65,s=d(n);for(let a=0;a<8;++a)for(let A=0;A<8;++A){if(!(h(s,e,a,A)<=0)){if(t<=0){++i;const n=l(s,e);if(n>o)return[n,i];c=Math.max(c,n)}else{const[n,a]=C(s,e,t-1,c);if(i+=a,n<65){if(n>o)return[n,i];c=Math.max(c,n)}else{const[n,a]=g(s,e,t-1,o);if(i+=a,n>o)return[n,i];n>-65?c=Math.max(c,n):p(s,e)||p(s,r)||(c=Math.max(c,l(s,e)),++i)}}s=d(n)}}return[c,i]}function C(n,e,t,o){const r=A(e);let i=0,c=65,s=d(n);for(let a=0;a<8;++a)for(let A=0;A<8;++A){if(!(h(s,r,a,A)<=0)){if(t<=0){++i;const n=l(s,e);if(n<o)return[n,i];c=Math.min(c,n)}else{const[n,a]=g(s,e,t-1,c);if(i+=a,n>-65){if(n<o)return[n,i];c=Math.min(c,n)}else{const[n,a]=C(s,e,t-1,o);i+=a,n<65?c=Math.min(c,n):p(s,e)||p(s,r)||(c=Math.min(c,l(s,e)),++i)}}s=d(n)}}return[c,i]}function I(n,e){const t=n.score,o=n.n;return t/e+Math.sqrt(2*Math.log2(e)/o)}function B(n,e){let t=i(n,e);for(;t.length>0;){const o=Math.floor(t.length*Math.random()),[r]=t[o],[c,s]=r;if(h(n,e,c,s)<=0)throw new Error;t=i(n,e=A(e)),t.length>0||(t=i(n,e=A(e)))}}function E(n,e){const t=i(n,e),o=[];for(const r of t){const[t,i]=r[0];let c=d(n);if(h(c,e,t,i)<=0)throw new Error;B(d(c),e);const s=l(c,e);o.push({board:c,nodes:[],x:t,y:i,score:s,n:1})}return o}function v(n,e){if(0==n.length)throw new Error;const t=e,o=[];for(;n.length>0;){e=A(e);let r=-1,i=0;for(let e=0;e<n.length;++e)i+=n[e].n;if(e===t){let e=Number.NEGATIVE_INFINITY;for(let t=0;t<n.length;++t){const o=I(n[t],i);e<o&&(e=o,r=t)}}else{let e=Number.POSITIVE_INFINITY;for(let t=0;t<n.length;++t){const o=I(n[t],i);e>o&&(e=o,r=t)}}if(r<0)throw new Error;const c=n[r];o.push(c),e=A(e),0==(n=c.nodes).length&&c.n>4&&(c.nodes=E(c.board,e),n=c.nodes)}const r=d(o[o.length-1].board);B(r,e);const i=l(r,t);for(const n of o)n.score+=i,++n.n}function w(n,e){const t=E(n,e);if(0==t.length)return[];if(64-a(n)<=5)return console.log("algorithm -> alpha-beta"),b(n,e,5);t.sort((n,e)=>{const t=n.x-e.x;return 0!==t?t:n.y-e.y});for(let n=0;n<5e3;++n)v(t,e);let o=0;const r=[];for(const n of t)r.push([[n.x,n.y],n.score/n.n,n.n]),o+=n.n,console.log("n1",n.x,n.y,n.n,n.score/n.n);return r}function x(n,e,t){let o=-65,r=[];const i=b(n,e,5);for(const n of i){const[e,t]=n;o<t?(o=t,r=[],r.push(e)):o==t&&r.push(e)}return r[Math.floor(Math.random()*r.length)]}function y(n,e,t){console.log("npc",t);const o=A(e);if(p(n,e))for(;;){const t=x(n,e);if(!t)return void alert("illegal state 1");const[r,i]=t;if(h(n,e,r,i)<=0&&alert("illegal state 2"),p(n,o)||!p(n,e))break;alert("You must pass.")}else alert("NPC must pass.")}function M(n,e){setTimeout(()=>{const t=l(n,e);0==t?alert("Draw"):t>0?alert("Win"):alert("Lose")},100)}class k{constructor(){this.scoringAlgorithm="mcts",this.npcAlgorithm="alphabeta",this.yourStone=1,this.npcEnabled=!0,this.searchDepth=5,this.scoreVisible=!0,this.div=document.createElement("div"),this.board=m(),this.stone=1,this.updateBoard(!0,this.scoreVisible)}updateBoard(n,e){const t=this.div;t.innerHTML="",t.appendChild(this.createBoardDom(n,e)),t.append(this.createInfoDom()),t.append(this.createScoreDom()),t.append(this.createControllerDom())}createControllerDom(){const n=document.createElement("table");{const e=document.createElement("tr"),t=document.createElement("label");t.innerHTML="Score",t.htmlFor="score-check";const o=document.createElement("th");o.appendChild(t),e.appendChild(o);const r=document.createElement("input");r.id="score-check",r.type="checkbox",r.onchange=()=>{r.checked?this.scoreVisible=!0:this.scoreVisible=!1,this.updateBoard(!0,this.scoreVisible)},r.checked=this.scoreVisible,r.className="control";const i=document.createElement("td");i.appendChild(r),e.appendChild(i);const c=document.createElement("select");c.id="score-algorithm";for(const n of["alphabeta","mcts"]){const e=document.createElement("option");e.innerHTML=n.toString(),e.value=n.toString(),c.appendChild(e),this.scoringAlgorithm==n&&(e.selected=!0)}c.onchange=()=>{for(const n of c.selectedOptions){this.scoringAlgorithm=n.value;break}console.log("algorithm: ",this.scoringAlgorithm),this.scoreVisible&&this.updateBoard(!0,this.scoreVisible)},c.className="control";const s=document.createElement("td");s.appendChild(c),e.appendChild(s),n.appendChild(e)}{const e=document.createElement("tr"),t=document.createElement("label");t.innerHTML="NPC",t.htmlFor="npc-check";const o=document.createElement("th");o.appendChild(t),e.appendChild(o);const r=document.createElement("input");r.id="npc-check",r.type="checkbox",r.onchange=()=>{r.checked?this.npcEnabled=!0:this.npcEnabled=!1},r.checked=this.npcEnabled,r.className="control";const i=document.createElement("td");i.appendChild(r),e.appendChild(i);const c=document.createElement("select");c.id="score-algorithm";for(const n of["alphabeta","mcts"]){const e=document.createElement("option");e.innerHTML=n.toString(),e.value=n.toString(),c.appendChild(e),this.npcAlgorithm==n&&(e.selected=!0)}c.onchange=()=>{for(const n of c.selectedOptions){this.npcAlgorithm=n.value;break}console.log("algorithm: ",this.npcAlgorithm),this.scoreVisible&&this.updateBoard(!0,this.scoreVisible)},c.className="control";const s=document.createElement("td");s.appendChild(c),e.appendChild(s),n.appendChild(e)}{const e=document.createElement("tr"),t=document.createElement("th");e.appendChild(t);const o=document.createElement("input");o.type="button",o.value="Reset",o.onclick=()=>{this.board=m(),this.stone=1,this.updateBoard(!0,this.scoreVisible)},o.className="control";const r=document.createElement("td");r.appendChild(o),e.appendChild(r),n.appendChild(e)}return n}createInfoDom(){const n=document.createElement("table");{const e=document.createElement("tr"),t=document.createElement("th");t.className="info",t.innerHTML="Next",e.appendChild(t);const o=document.createElement("th");o.className="info",o.innerHTML="Turn",e.appendChild(o),n.appendChild(e)}{0===this.stone||p(this.board,this.stone)||p(this.board,A(this.stone))||(this.stone=0);const e=document.createElement("tr"),t=document.createElement("td");1==this.stone?(t.className="b info",t.innerHTML="●"):this.stone==o?(t.className="w info",t.innerHTML="●"):(t.innerHTML="Game End",t.className="info"),e.appendChild(t);const r=document.createElement("td");r.className="info";const i=a(this.board);r.innerHTML=(i-3).toString(),e.appendChild(r),n.appendChild(e)}return n}createScoreDom(){const n=document.createElement("table");{const e=document.createElement("tr"),t=document.createElement("th");t.className="score",t.innerHTML="Name",e.appendChild(t);const o=document.createElement("th");o.className="score",o.innerHTML="Black",e.appendChild(o);const r=document.createElement("th");r.className="score",r.innerHTML="White",e.appendChild(r),n.appendChild(e)}const e=s(this.board,1),t=s(this.board,o);{const o=document.createElement("tr"),r=document.createElement("td");r.className="score",r.innerHTML="Stones",o.appendChild(r);const i=document.createElement("td");i.className="score",i.innerHTML=e.toString(),o.appendChild(i);const c=document.createElement("td");c.className="score",c.innerHTML=t.toString(),o.appendChild(c),n.appendChild(o)}{const o=document.createElement("tr"),r=document.createElement("td");r.className="score",r.innerHTML="Score",o.appendChild(r);const i=document.createElement("td");i.className="score",i.innerHTML=(e-t).toString(),o.appendChild(i);const c=document.createElement("td");c.className="score",c.innerHTML=(t-e).toString(),o.appendChild(c),n.appendChild(o)}return n}createBoardDom(n,e){const t=this.yourStone,r=document.createElement("table");r.className="board";const c=this.stone;let s;if(e&&n)if(console.log("scoring",this.scoringAlgorithm),"mcts"===this.scoringAlgorithm)s=w(this.board,c);else{if("alphabeta"!==this.scoringAlgorithm)throw new Error("algorithm: "+this.scoringAlgorithm);s=b(this.board,c,this.searchDepth)}else s=n?i(this.board,c):[];let a=0,l=-65;for(const n of s){const[e,t,o]=n;l=Math.max(l,t),a+=o}for(let n=0;n<8;++n){const e=document.createElement("tr");e.className="board",r.appendChild(e);for(let r=0;r<8;++r){const i=document.createElement("td"),a=this.board[n][r];if(1===a)i.innerHTML="●",i.className="board b";else if(a==o)i.innerHTML="●",i.className="board w";else{i.className="board";let e=null;for(const t of s){const[o,i]=t[0];if(o===n&&i===r){e=t[1];break}}if(null!=e){const s=document.createElement("input");s.type="button",-65==e?(s.className="candidate",s.value=""):e==l?1===c?(s.className="best-candidate-b",s.value=Math.round(e).toString()):c===o&&(s.className="best-candidate-w",s.value=Math.round(e).toString()):1===c?(s.className="candidate-b",s.value=Math.round(e).toString()):c===o&&(s.className="candidate-w",s.value=Math.round(e).toString()),s.onclick=()=>{if(h(this.board,this.stone,n,r)<=0)return;this.updateBoard(!1,!1);const e=A(this.stone);if(!p(this.board,this.stone)&&!p(this.board,e))return this.stone=0,void M(this.board,t);this.updateBoard(!1,!1),setTimeout(()=>{this.npcEnabled?(y(this.board,e,this.npcAlgorithm),p(this.board,this.stone)||(this.stone=0,M(this.board,t))):p(this.board,e)?this.stone=e:p(this.board,this.stone)||(this.stone=0),this.updateBoard(!0,this.scoreVisible)},10)},i.appendChild(s)}}e.appendChild(i)}}return r}}t(1);window.addEventListener("DOMContentLoaded",()=>{!function(){const n=new k;document.body.appendChild(n.div)}()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JvYXJkLnRzIiwid2VicGFjazovLy8uL3NyYy9tZXRob2QvYWxwaGFiZXRhLnRzIiwid2VicGFjazovLy8uL3NyYy9tZXRob2QvbWN0cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvR2FtZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VNYXAiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwiY29uY2F0Iiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwiam9pbiIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsImlkIiwiX2kiLCJwdXNoIiwiYXBpIiwiZGVmYXVsdCIsIm9wdGlvbnMiLCJsb2NhbHMiLCJtZW1vIiwiaXNPbGRJRSIsIkJvb2xlYW4iLCJ3aW5kb3ciLCJkb2N1bWVudCIsImFsbCIsImF0b2IiLCJnZXRUYXJnZXQiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleCIsIm9iaiIsImNzcyIsIm1lZGlhIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiY3JlYXRlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJub25jZSIsImtleXMiLCJmb3JFYWNoIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaW5kZXgiLCJzcGxpY2UiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsIlciLCJkaXJzIiwic2NhbkNhbmRpZGF0ZXMiLCJib2FyZCIsInN0b25lIiwieSIsIngiLCJkaXIiLCJkeCIsImR5IiwicmV2ZXJzYWJsZSIsInJzIiwicmV2ZXJzZSIsIm54IiwibnkiLCJjb250YWlucyIsImNvdW50U3RvbmVzIiwic2NvcmUiLCJqIiwiY291bnRUdXJucyIsImV2YWxTY29yZSIsImNsb25lQm9hcmQiLCJBcnJheSIsInJvdyIsImNsb25lUm93IiwicHV0U3RvbmUiLCJkaWZmIiwicmV2ZXJzZUxpbmUiLCJoYXNDYW5kaWRhdGVzIiwibmV3Qm9hcmQiLCJmaWxsIiwiY2FuZGlkYXRlTGlzdCIsImRlcHRoIiwibmV4dEJvYXJkIiwibWluQ2FuZGlkYXRlcyIsInNjb3JlMiIsIm4yIiwibWF4Q2FuZGlkYXRlcyIsInVwcGVyIiwibWF4U2NvcmUiLCJNYXRoIiwibWF4IiwibG93ZXIiLCJtaW5TY29yZSIsIm1pbiIsImV2YWxVY2IxIiwibm9kZSIsIm5qIiwic3FydCIsImxvZzIiLCJwbGF5b3V0IiwiY2FuZGlkYXRlcyIsImZsb29yIiwicmFuZG9tIiwieHkiLCJnYW1lTm9kZSIsIm5vZGVzIiwiY2FuZGlkYXRlIiwiY2hvaWNlTm9kZSIsInN0b25lMCIsImZvb3RwcmludHMiLCJOdW1iZXIiLCJORUdBVElWRV9JTkZJTklUWSIsIlBPU0lUSVZFX0lORklOSVRZIiwicGxheUJvYXJkIiwiY29uc29sZSIsImxvZyIsInNvcnQiLCJhIiwiYiIsIm5wY0Jlc3RDYW5kaWRhdGVzIiwiYWxnb3JpdGhtIiwiaWoiLCJucGMiLCJhbGVydCIsImFsZXJ0R2FtZVJlc3VsdCIsInNldFRpbWVvdXQiLCJzY29yaW5nQWxnb3JpdGhtIiwibnBjQWxnb3JpdGhtIiwieW91clN0b25lIiwibnBjRW5hYmxlZCIsInNlYXJjaERlcHRoIiwic2NvcmVWaXNpYmxlIiwiZGl2IiwidXBkYXRlQm9hcmQiLCJidXR0b25FbmFibGVkIiwiaW5uZXJIVE1MIiwiY3JlYXRlQm9hcmREb20iLCJhcHBlbmQiLCJjcmVhdGVJbmZvRG9tIiwiY3JlYXRlU2NvcmVEb20iLCJjcmVhdGVDb250cm9sbGVyRG9tIiwidGFibGUiLCJ0ciIsImxhYmVsIiwiaHRtbEZvciIsInRoIiwiY2hlY2tib3giLCJ0eXBlIiwib25jaGFuZ2UiLCJjaGVja2VkIiwiY2xhc3NOYW1lIiwidGQiLCJzZWxlY3QiLCJvcHRpb24iLCJzZWxlY3RlZCIsIm9wdCIsInNlbGVjdGVkT3B0aW9ucyIsInRkU2NvcmluZyIsInRkQWxnb3JpdGhtIiwiYnV0dG9uUmVzZXQiLCJvbmNsaWNrIiwidGhOZXh0IiwidGhUdXJuIiwidGROZXh0IiwidGRUdXJuIiwic3RvbmVzIiwidGhOYW1lIiwidGhCbGFjayIsInRoV2hpdGUiLCJiU3RvbmVzIiwid1N0b25lcyIsInRkTGFiZWwiLCJ0ZEJsYWNrIiwidGRXaGl0ZSIsInRvdGFsQ291bnQiLCJpMSIsImoxIiwiYnV0dG9uIiwicm91bmQiLCJhZGRFdmVudExpc3RlbmVyIiwiZ2FtZSIsImJvZHkiLCJpbml0Il0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVB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SSxFQUFHNEosSUFDckMsRUFBRyxPQUVmekgsS0FBSzJMLGFBQVksR0FBTyxHQUV4QixNQUFNek0sRUFBS2lJLEVBQVFuSCxLQUFLMkcsT0FDeEIsSUFBS3dCLEVBQWNuSSxLQUFLMEcsTUFBTzFHLEtBQUsyRyxTQUN4QndCLEVBQWNuSSxLQUFLMEcsTUFBT3hILEdBR2xDLE9BRkFjLEtBQUsyRyxNSDVkM0IsT0c2ZHNCdUUsRUFBZ0JsTCxLQUFLMEcsTUFBTzRFLEdBSWhDdEwsS0FBSzJMLGFBQVksR0FBTyxHQUV4QlIsV0FBVyxLQUNIbkwsS0FBS3VMLFlBQ0xQLEVBQUloTCxLQUFLMEcsTUFBT3hILEVBQUljLEtBQUtxTCxjQUNwQmxELEVBQWNuSSxLQUFLMEcsTUFBTzFHLEtBQUsyRyxTQUNoQzNHLEtBQUsyRyxNSHZlbkMsRUd3ZThCdUUsRUFBZ0JsTCxLQUFLMEcsTUFBTzRFLEtBRzVCbkQsRUFBY25JLEtBQUswRyxNQUFPeEgsR0FDMUJjLEtBQUsyRyxNQUFRekgsRUFDTGlKLEVBQWNuSSxLQUFLMEcsTUFBTzFHLEtBQUsyRyxTQUN2QzNHLEtBQUsyRyxNSDllbkMsR0dpZnNCM0csS0FBSzJMLGFBQVksRUFBTTNMLEtBQUt5TCxlQUM3QixLQUVQb0IsRUFBR3BJLFlBQVk4SixJQUd2Qm5DLEVBQUczSCxZQUFZb0ksSUFHdkIsT0FBT1YsRyxLQ3pmZmhLLE9BQU9zTSxpQkFBaUIsbUJBQW9CLE1BSTVDLFdBQ0ksTUFBTUMsRUFBTyxJQUFJLEVBQ2pCdE0sU0FBU3VNLEtBQUtsSyxZQUFZaUssRUFBS2hELEtBTC9Ca0QiLCJmaWxlIjoiYXBwLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA0KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgYnRvYSkge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyh0cnVlKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImJvZHkge1xcbiAgICBtYXJnaW46IDA7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNBQUE7XFxufVxcblxcbmlucHV0IHtcXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG59XFxuXFxuLmNvbnRyb2wge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQ0NDO1xcbiAgICBjb2xvcjogYmxhY2s7XFxuICAgIGJvcmRlcjogc29saWQgMDtcXG4gICAgZm9udC1zaXplOiAxMHB0O1xcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbn1cXG5cXG4uYiB7XFxuICAgIGNvbG9yOiAjMDAwO1xcbiAgICBmb250LXNpemU6IDE2cHQ7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLncge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgZm9udC1zaXplOiAxNnB0O1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi5jYW5kaWRhdGUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDkwO1xcbiAgICBib3JkZXI6IHNvbGlkIDA7XFxuICAgIGZvbnQtc2l6ZTogMTJwdDtcXG4gICAgY29sb3I6IGdyZWVuO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cXG4uY2FuZGlkYXRlLWIge1xcbiAgICBib3JkZXI6IHNvbGlkIDA7XFxuICAgIGZvbnQtc2l6ZTogMTJwdDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzA5MDtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgY29sb3I6ICMyMjI7XFxufVxcbi5jYW5kaWRhdGUtdyB7XFxuICAgIGJvcmRlcjogc29saWQgMDtcXG4gICAgZm9udC1zaXplOiAxMnB0O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDkwO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBjb2xvcjogI0RERDtcXG59XFxuXFxuLmJlc3QtY2FuZGlkYXRlLWIge1xcbiAgICBib3JkZXI6IHNvbGlkIDA7XFxuICAgIGZvbnQtc2l6ZTogMTJwdDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzBCMDtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgY29sb3I6ICMwMDA7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG4uYmVzdC1jYW5kaWRhdGUtdyB7XFxuICAgIGJvcmRlcjogc29saWQgMDtcXG4gICAgZm9udC1zaXplOiAxMnB0O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMEIwO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbnVsIHtcXG4gICAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcbn1cXG5cXG4uc2NvcmUge1xcbiAgICBjb2xvcjogIzAwMDtcXG59XFxuXFxudGFibGUuYm9hcmQge1xcbiAgICBmbG9hdDogbGVmdDtcXG4gICAgcGFkZGluZzogMHB4O1xcbiAgICBtYXJnaW46IDVweDtcXG4gICAgYm9yZGVyLWNvbGxhcHNlOiBub25lO1xcbiAgICBib3JkZXItc3BhY2luZzogMDtcXG59XFxuXFxudHIuYm9hcmQge1xcbiAgICBib3JkZXItY29sbGFwc2U6IG5vbmU7XFxuICAgIGJvcmRlci1zcGFjaW5nOiAwO1xcbiAgICBwYWRkaW5nOiAwcHg7XFxuICAgIG1hcmdpbjogMHB4O1xcbn1cXG5cXG50ZC5ib2FyZCB7XFxuICAgIHdpZHRoOiA1O1xcbiAgICBoZWlnaHQ6IDU7XFxuICAgIHBhZGRpbmc6IDBweDtcXG4gICAgbWFyZ2luOiAxcHg7XFxuICAgIHdpZHRoOiA1MHB4O1xcbiAgICBoZWlnaHQ6IDUwcHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGdyZWVuO1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjYmJiO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbnRoLnNjb3JlLCB0ZC5zY29yZSB7XFxuICAgIHdpZHRoOiA3NXB4O1xcbiAgICBmb250LXNpemU6IDEwcHQ7XFxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xcbn1cXG5cXG50aC5pbmZvLCB0ZC5pbmZvIHtcXG4gICAgd2lkdGg6IDc1cHg7XFxuICAgIGZvbnQtc2l6ZTogMTBwdDtcXG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcInN0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLFNBQVM7SUFDVCxnQkFBZ0I7SUFDaEIsc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksc0JBQXNCO0lBQ3RCLFlBQVk7SUFDWixlQUFlO0lBQ2YsZUFBZTtJQUNmLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxlQUFlO0lBQ2Ysa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksV0FBVztJQUNYLGVBQWU7SUFDZixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxzQkFBc0I7SUFDdEIsZUFBZTtJQUNmLGVBQWU7SUFDZixZQUFZO0lBQ1osV0FBVztJQUNYLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsZUFBZTtJQUNmLHNCQUFzQjtJQUN0QixXQUFXO0lBQ1gsWUFBWTtJQUNaLFdBQVc7QUFDZjtBQUNBO0lBQ0ksZUFBZTtJQUNmLGVBQWU7SUFDZixzQkFBc0I7SUFDdEIsV0FBVztJQUNYLFlBQVk7SUFDWixXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsZUFBZTtJQUNmLHNCQUFzQjtJQUN0QixXQUFXO0lBQ1gsWUFBWTtJQUNaLFdBQVc7SUFDWCxpQkFBaUI7QUFDckI7QUFDQTtJQUNJLGVBQWU7SUFDZixlQUFlO0lBQ2Ysc0JBQXNCO0lBQ3RCLFdBQVc7SUFDWCxZQUFZO0lBQ1osV0FBVztJQUNYLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLHFCQUFxQjtBQUN6Qjs7QUFFQTtJQUNJLFdBQVc7QUFDZjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0lBQ1osV0FBVztJQUNYLHFCQUFxQjtJQUNyQixpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxxQkFBcUI7SUFDckIsaUJBQWlCO0lBQ2pCLFlBQVk7SUFDWixXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxRQUFRO0lBQ1IsU0FBUztJQUNULFlBQVk7SUFDWixXQUFXO0lBQ1gsV0FBVztJQUNYLFlBQVk7SUFDWix1QkFBdUI7SUFDdkIsc0JBQXNCO0lBQ3RCLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxlQUFlO0lBQ2YsaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksV0FBVztJQUNYLGVBQWU7SUFDZixpQkFBaUI7QUFDckJcIixcImZpbGVcIjpcInN0eWxlLmNzc1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCJib2R5IHtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQUFBO1xcbn1cXG5cXG5pbnB1dCB7XFxuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxufVxcblxcbi5jb250cm9sIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0NDQztcXG4gICAgY29sb3I6IGJsYWNrO1xcbiAgICBib3JkZXI6IHNvbGlkIDA7XFxuICAgIGZvbnQtc2l6ZTogMTBwdDtcXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG59XFxuXFxuLmIge1xcbiAgICBjb2xvcjogIzAwMDtcXG4gICAgZm9udC1zaXplOiAxNnB0O1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi53IHtcXG4gICAgY29sb3I6ICNmZmY7XFxuICAgIGZvbnQtc2l6ZTogMTZwdDtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4uY2FuZGlkYXRlIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzA5MDtcXG4gICAgYm9yZGVyOiBzb2xpZCAwO1xcbiAgICBmb250LXNpemU6IDEycHQ7XFxuICAgIGNvbG9yOiBncmVlbjtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG59XFxuXFxuLmNhbmRpZGF0ZS1iIHtcXG4gICAgYm9yZGVyOiBzb2xpZCAwO1xcbiAgICBmb250LXNpemU6IDEycHQ7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwOTA7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIGNvbG9yOiAjMjIyO1xcbn1cXG4uY2FuZGlkYXRlLXcge1xcbiAgICBib3JkZXI6IHNvbGlkIDA7XFxuICAgIGZvbnQtc2l6ZTogMTJwdDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzA5MDtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgY29sb3I6ICNEREQ7XFxufVxcblxcbi5iZXN0LWNhbmRpZGF0ZS1iIHtcXG4gICAgYm9yZGVyOiBzb2xpZCAwO1xcbiAgICBmb250LXNpemU6IDEycHQ7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwQjA7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIGNvbG9yOiAjMDAwO1xcbiAgICBmb250LXdlaWdodDogYm9sZDtcXG59XFxuLmJlc3QtY2FuZGlkYXRlLXcge1xcbiAgICBib3JkZXI6IHNvbGlkIDA7XFxuICAgIGZvbnQtc2l6ZTogMTJwdDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzBCMDtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgY29sb3I6ICNmZmY7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG51bCB7XFxuICAgIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG59XFxuXFxuLnNjb3JlIHtcXG4gICAgY29sb3I6ICMwMDA7XFxufVxcblxcbnRhYmxlLmJvYXJkIHtcXG4gICAgZmxvYXQ6IGxlZnQ7XFxuICAgIHBhZGRpbmc6IDBweDtcXG4gICAgbWFyZ2luOiA1cHg7XFxuICAgIGJvcmRlci1jb2xsYXBzZTogbm9uZTtcXG4gICAgYm9yZGVyLXNwYWNpbmc6IDA7XFxufVxcblxcbnRyLmJvYXJkIHtcXG4gICAgYm9yZGVyLWNvbGxhcHNlOiBub25lO1xcbiAgICBib3JkZXItc3BhY2luZzogMDtcXG4gICAgcGFkZGluZzogMHB4O1xcbiAgICBtYXJnaW46IDBweDtcXG59XFxuXFxudGQuYm9hcmQge1xcbiAgICB3aWR0aDogNTtcXG4gICAgaGVpZ2h0OiA1O1xcbiAgICBwYWRkaW5nOiAwcHg7XFxuICAgIG1hcmdpbjogMXB4O1xcbiAgICB3aWR0aDogNTBweDtcXG4gICAgaGVpZ2h0OiA1MHB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBncmVlbjtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2JiYjtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG50aC5zY29yZSwgdGQuc2NvcmUge1xcbiAgICB3aWR0aDogNzVweDtcXG4gICAgZm9udC1zaXplOiAxMHB0O1xcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcXG59XFxuXFxudGguaW5mbywgdGQuaW5mbyB7XFxuICAgIHdpZHRoOiA3NXB4O1xcbiAgICBmb250LXNpemU6IDEwcHQ7XFxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xcbn1cIl19XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsImNvbnN0IEIgPSAxXG5jb25zdCBXID0gLTFcbmNvbnN0IEUgPSAwO1xuXG50eXBlIFN0b25lID0gLTEgfCAwIHwgMTtcbnR5cGUgQm9hcmQgPSBTdG9uZVtdW107XG50eXBlIENhbmRpZGF0ZSA9IFtbbnVtYmVyLCBudW1iZXJdLCBudW1iZXIsIG51bWJlcl1cblxuY29uc3QgZGlycyA9IFtcbiAgICBbMCwgLTFdLFxuICAgIFsxLCAtMV0sXG4gICAgWzEsIDBdLFxuICAgIFsxLCAxXSxcbiAgICBbMCwgMV0sXG4gICAgWy0xLCAxXSxcbiAgICBbLTEsIDBdLFxuICAgIFstMSwgLTFdXG5dO1xuXG5jb25zdCBNQVhfU0NPUkUgPSA4ICogOCArIDE7XG5jb25zdCBNSU5fU0NPUkUgPSAtIE1BWF9TQ09SRTtcblxuZnVuY3Rpb24gc2NhbkNhbmRpZGF0ZXMoYm9hcmQ6IEJvYXJkLCBzdG9uZTogU3RvbmUpIHtcbiAgICBjb25zdCBsaXN0OiBDYW5kaWRhdGVbXSA9IFtdO1xuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgODsgKyt5KSB7XG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgODsgKyt4KSB7XG4gICAgICAgICAgICBpZiAoYm9hcmRbeF1beV0gIT0gRSkgY29udGludWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZvciAoY29uc3QgZGlyIG9mIGRpcnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBbZHgsIGR5XSA9IGRpcjtcbiAgICAgICAgICAgICAgICBpZiAocmV2ZXJzYWJsZShib2FyZCwgc3RvbmUsIHgsIHksIGR4LCBkeSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdC5wdXNoKFtbeCwgeV0sIE1JTl9TQ09SRSwgMF0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxpc3Q7XG59XG5cbmZ1bmN0aW9uIHJldmVyc2FibGUoYm9hcmQ6IEJvYXJkLCBzdG9uZTogU3RvbmUsIHg6IG51bWJlciwgeTogbnVtYmVyLCBkeDogbnVtYmVyLCBkeTogbnVtYmVyKSB7XG4gICAgY29uc3QgcnMgPSByZXZlcnNlKHN0b25lKTtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGxldCBueCA9IHg7XG4gICAgbGV0IG55ID0geTtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBueCArPSBkeDtcbiAgICAgICAgbnkgKz0gZHk7XG4gICAgICAgIGlmICghY29udGFpbnMobngsIG55KSkgYnJlYWs7XG4gICAgICAgIGNvbnN0IHMgPSBib2FyZFtueF1bbnldO1xuICAgICAgICBpZiAocyA9PT0gcnMpIHtcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocyA9PT0gc3RvbmUgJiYgY291bnQgPiAwKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gY291bnRTdG9uZXMoYm9hcmQ6IEJvYXJkLCBzdG9uZTogU3RvbmUpIHtcbiAgICBsZXQgc2NvcmUgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgODsgKytpKSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgODsgKytqKSB7XG4gICAgICAgICAgICBpZiAoYm9hcmRbaV1bal0gPT0gc3RvbmUpIHtcbiAgICAgICAgICAgICAgICArK3Njb3JlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzY29yZTtcbn1cblxuZnVuY3Rpb24gY291bnRUdXJucyhib2FyZDogQm9hcmQpIHtcbiAgICBsZXQgc2NvcmUgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgODsgKytpKSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgODsgKytqKSB7XG4gICAgICAgICAgICBpZiAoYm9hcmRbaV1bal0gIT09IEUpIHtcbiAgICAgICAgICAgICAgICArK3Njb3JlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzY29yZSAtIDM7XG59XG5cbmZ1bmN0aW9uIGV2YWxTY29yZShib2FyZDogQm9hcmQsIHN0b25lOiBTdG9uZSkge1xuICAgIGxldCBzY29yZSA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA4OyArK2kpIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCA4OyArK2opIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBib2FyZFtpXVtqXTtcbiAgICAgICAgICAgIGlmIChzID09PSBzdG9uZSkge1xuICAgICAgICAgICAgICAgICsrc2NvcmU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHMgIT09IEUpIHtcbiAgICAgICAgICAgICAgICAtLXNjb3JlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzY29yZTtcbn1cblxuZnVuY3Rpb24gY2xvbmVCb2FyZChib2FyZDogQm9hcmQpIHtcbiAgICBjb25zdCBjbG9uZUJvYXJkOiBCb2FyZCA9IG5ldyBBcnJheSg4KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDg7ICsraSkge1xuICAgICAgICBjb25zdCByb3cgPSBib2FyZFtpXTtcbiAgICAgICAgY29uc3QgY2xvbmVSb3cgPSBuZXcgQXJyYXkoOCk7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgODsgKytqKSB7XG4gICAgICAgICAgICBjbG9uZVJvd1tqXSA9IHJvd1tqXTtcbiAgICAgICAgfVxuICAgICAgICBjbG9uZUJvYXJkW2ldID0gY2xvbmVSb3c7XG4gICAgfVxuICAgIHJldHVybiBjbG9uZUJvYXJkO1xufVxuXG5mdW5jdGlvbiByZXZlcnNlKHN0b25lOiBTdG9uZSk6IFN0b25lIHtcbiAgICByZXR1cm4gKHN0b25lICogLTEpIGFzIFN0b25lO1xufVxuXG5mdW5jdGlvbiBwdXRTdG9uZShib2FyZDogQm9hcmQsIHN0b25lOiBTdG9uZSwgeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICBpZiAoYm9hcmRbeF1beV0gIT0gRSkgcmV0dXJuIDA7XG5cbiAgICBsZXQgZGlmZiA9IDA7XG4gICAgZm9yIChjb25zdCBkaXIgb2YgZGlycykge1xuICAgICAgICBjb25zdCBbZHgsIGR5XSA9IGRpcjtcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgbGV0IG54ID0geDtcbiAgICAgICAgbGV0IG55ID0geTtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIG54ICs9IGR4O1xuICAgICAgICAgICAgbnkgKz0gZHk7XG4gICAgICAgICAgICBpZiAoIWNvbnRhaW5zKG54LCBueSkpIGJyZWFrO1xuICAgICAgICAgICAgY29uc3QgcyA9IGJvYXJkW254XVtueV07XG4gICAgICAgICAgICBpZiAocyA9PT0gRSkgYnJlYWs7XG4gICAgICAgICAgICBpZiAocyA9PT0gc3RvbmUpIHtcbiAgICAgICAgICAgICAgICBpZiAoY291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldmVyc2VMaW5lKGJvYXJkLCBzLCB4LCB5LCBkeCwgZHksIGNvdW50KTtcbiAgICAgICAgICAgICAgICAgICAgZGlmZiArPSBjb3VudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChkaWZmID4gMCkge1xuICAgICAgICBib2FyZFt4XVt5XSA9IHN0b25lO1xuICAgIH1cbiAgICByZXR1cm4gZGlmZjtcbn1cblxuZnVuY3Rpb24gY29udGFpbnMoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICByZXR1cm4gMCA8PSB4ICYmIHggPCA4ICYmIDAgPD0geSAmJiB5IDwgODtcbn1cblxuZnVuY3Rpb24gcmV2ZXJzZUxpbmUoYm9hcmQ6IEJvYXJkLCBzdG9uZTogU3RvbmUsIHg6IG51bWJlciwgeTogbnVtYmVyLCBkeDogbnVtYmVyLCBkeTogbnVtYmVyLCBjb3VudDogbnVtYmVyKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7XG4gICAgICAgIHggKz0gZHgsIHkgKz0gZHk7XG4gICAgICAgIGJvYXJkW3hdW3ldID0gc3RvbmU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBoYXNDYW5kaWRhdGVzKGJvYXJkOiBCb2FyZCwgc3RvbmU6IFN0b25lKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA4OyArK2kpIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCA4OyArK2opIHtcbiAgICAgICAgICAgIGlmIChib2FyZFtpXVtqXSAhPSBFKSBjb250aW51ZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yIChjb25zdCBkaXIgb2YgZGlycykge1xuICAgICAgICAgICAgICAgIGNvbnN0IFtkeCwgZHldID0gZGlyO1xuICAgICAgICAgICAgICAgIGxldCBjb3VudCA9IDE7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeCA9IGkgKyBkeCAqIGNvdW50O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB5ID0gaiArIGR5ICogY291bnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY29udGFpbnMoeCwgeSkpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gYm9hcmRbeF1beV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChzID09PSBFKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMgPT09IHN0b25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY291bnQgPiAxKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbmV3Qm9hcmQoKSB7XG4gICAgY29uc3QgYm9hcmQ6IEJvYXJkID0gbmV3IEFycmF5KDgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9hcmQubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgYm9hcmRbaV0gPSBuZXcgQXJyYXkoOCkuZmlsbChFKTtcbiAgICB9XG4gICAgYm9hcmRbM11bM10gPSBCO1xuICAgIGJvYXJkWzNdWzRdID0gVztcbiAgICBib2FyZFs0XVszXSA9IFc7XG4gICAgYm9hcmRbNF1bNF0gPSBCO1xuICAgIHJldHVybiBib2FyZDtcbn1cblxuZXhwb3J0IHtcbiAgICBFLCBCLCBXLFxuICAgIGRpcnMsXG4gICAgTUlOX1NDT1JFLCBNQVhfU0NPUkUsXG4gICAgQm9hcmQsIFN0b25lLCBDYW5kaWRhdGUsXG4gICAgbmV3Qm9hcmQsIHNjYW5DYW5kaWRhdGVzLFxuICAgIGNsb25lQm9hcmQsIHJldmVyc2UsIHB1dFN0b25lLCBoYXNDYW5kaWRhdGVzLFxuICAgIGNvdW50U3RvbmVzLCBjb3VudFR1cm5zLCBldmFsU2NvcmVcbn07IiwiLyoqXG4gKiBBbHBoYeKAk2JldGEgcHJ1bmluZ1xuICovXG5pbXBvcnQge1xuICAgIE1JTl9TQ09SRSwgTUFYX1NDT1JFLFxuICAgIEJvYXJkLCBTdG9uZSwgQ2FuZGlkYXRlLCBcbiAgICBjbG9uZUJvYXJkLCByZXZlcnNlLCBwdXRTdG9uZSwgaGFzQ2FuZGlkYXRlcywgZXZhbFNjb3JlXG59IGZyb20gJy4uL2JvYXJkJztcblxuZnVuY3Rpb24gY2FuZGlkYXRlTGlzdChib2FyZDogQm9hcmQsIHN0b25lOiBTdG9uZSwgZGVwdGg6IG51bWJlcik6IENhbmRpZGF0ZVtdIHtcbiAgICBjb25zdCBycyA9IHJldmVyc2Uoc3RvbmUpO1xuICAgIGNvbnN0IGxpc3Q6IENhbmRpZGF0ZVtdID0gW107XG4gICAgbGV0IG5leHRCb2FyZCA9IGNsb25lQm9hcmQoYm9hcmQpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgODsgKytpKSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgODsgKytqKSB7XG4gICAgICAgICAgICBjb25zdCBkaWZmID0gcHV0U3RvbmUobmV4dEJvYXJkLCBzdG9uZSwgaSwgaik7XG4gICAgICAgICAgICBpZiAoZGlmZiA8PSAwKSBjb250aW51ZTtcblxuICAgICAgICAgICAgaWYgKGRlcHRoIDw9IDApIHtcbiAgICAgICAgICAgICAgICBsaXN0LnB1c2goW1tpLCBqXSwgTUlOX1NDT1JFLCAxXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IFtzY29yZSwgbl0gPSBtaW5DYW5kaWRhdGVzKG5leHRCb2FyZCwgc3RvbmUsIGRlcHRoIC0gMSwgTUlOX1NDT1JFKTtcbiAgICAgICAgICAgICAgICBpZiAoc2NvcmUgPCBNQVhfU0NPUkUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdC5wdXNoKFtbaSwgal0sIHNjb3JlLCBuXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgW3Njb3JlMiwgbjJdID0gbWF4Q2FuZGlkYXRlcyhuZXh0Qm9hcmQsIHN0b25lLCBkZXB0aCAtIDEsIE1JTl9TQ09SRSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzY29yZTIgPiBNSU5fU0NPUkUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QucHVzaChbW2ksIGpdLCBzY29yZTIsIG4yXSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWhhc0NhbmRpZGF0ZXMobmV4dEJvYXJkLCBzdG9uZSkgJiYgIWhhc0NhbmRpZGF0ZXMobmV4dEJvYXJkLCBycykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QucHVzaChbW2ksIGpdLCBldmFsU2NvcmUobmV4dEJvYXJkLCBzdG9uZSksIDFdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5leHRCb2FyZCA9IGNsb25lQm9hcmQoYm9hcmQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsaXN0O1xufVxuXG5mdW5jdGlvbiBtYXhDYW5kaWRhdGVzKGJvYXJkOiBCb2FyZCwgc3RvbmU6IFN0b25lLCBkZXB0aDogbnVtYmVyLCB1cHBlcjogbnVtYmVyKTogW251bWJlciwgbnVtYmVyXSB7XG4gICAgY29uc3QgcnMgPSByZXZlcnNlKHN0b25lKTtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGxldCBtYXhTY29yZSA9IE1JTl9TQ09SRTtcbiAgICBsZXQgbmV4dEJvYXJkID0gY2xvbmVCb2FyZChib2FyZCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA4OyArK2kpIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCA4OyArK2opIHtcbiAgICAgICAgICAgIGNvbnN0IGRpZmYgPSBwdXRTdG9uZShuZXh0Qm9hcmQsIHN0b25lLCBpLCBqKTtcbiAgICAgICAgICAgIGlmIChkaWZmIDw9IDApIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBpZiAoZGVwdGggPD0gMCkge1xuICAgICAgICAgICAgICAgICsrY291bnQ7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2NvcmUgPSBldmFsU2NvcmUobmV4dEJvYXJkLCBzdG9uZSk7XG4gICAgICAgICAgICAgICAgaWYgKHNjb3JlID4gdXBwZXIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbc2NvcmUsIGNvdW50XTtcbiAgICAgICAgICAgICAgICBtYXhTY29yZSA9IE1hdGgubWF4KG1heFNjb3JlLCBzY29yZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IFtzY29yZSwgbl0gPSBtaW5DYW5kaWRhdGVzKFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEJvYXJkLCBzdG9uZSwgZGVwdGggLSAxLCBtYXhTY29yZSk7XG4gICAgICAgICAgICAgICAgY291bnQgKz0gbjtcbiAgICAgICAgICAgICAgICBpZiAoc2NvcmUgPCBNQVhfU0NPUkUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjb3JlID4gdXBwZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3Njb3JlLCBjb3VudF07XG4gICAgICAgICAgICAgICAgICAgIG1heFNjb3JlID0gTWF0aC5tYXgobWF4U2NvcmUsIHNjb3JlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBbc2NvcmUyLCBuMl0gPSBtYXhDYW5kaWRhdGVzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRCb2FyZCwgc3RvbmUsIGRlcHRoIC0gMSwgdXBwZXIpO1xuICAgICAgICAgICAgICAgICAgICBjb3VudCArPSBuMjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjb3JlMiA+IHVwcGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtzY29yZTIsIGNvdW50XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjb3JlMiA+IE1JTl9TQ09SRSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4U2NvcmUgPSBNYXRoLm1heChtYXhTY29yZSwgc2NvcmUyKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghaGFzQ2FuZGlkYXRlcyhuZXh0Qm9hcmQsIHN0b25lKSAmJiAhaGFzQ2FuZGlkYXRlcyhuZXh0Qm9hcmQsIHJzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4U2NvcmUgPSBNYXRoLm1heChtYXhTY29yZSwgZXZhbFNjb3JlKG5leHRCb2FyZCwgc3RvbmUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICsrY291bnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXh0Qm9hcmQgPSBjbG9uZUJvYXJkKGJvYXJkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gW21heFNjb3JlLCBjb3VudF07XG59XG5cbmZ1bmN0aW9uIG1pbkNhbmRpZGF0ZXMoYm9hcmQ6IEJvYXJkLCBzdG9uZTogU3RvbmUsIGRlcHRoOiBudW1iZXIsIGxvd2VyOiBudW1iZXIpOiBbbnVtYmVyLCBudW1iZXJdIHtcbiAgICBjb25zdCBycyA9IHJldmVyc2Uoc3RvbmUpO1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgbGV0IG1pblNjb3JlID0gTUFYX1NDT1JFO1xuICAgIGxldCBuZXh0Qm9hcmQgPSBjbG9uZUJvYXJkKGJvYXJkKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDg7ICsraSkge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDg7ICsraikge1xuICAgICAgICAgICAgY29uc3QgZGlmZiA9IHB1dFN0b25lKG5leHRCb2FyZCwgcnMsIGksIGopO1xuICAgICAgICAgICAgaWYgKGRpZmYgPD0gMCkgY29udGludWU7XG5cbiAgICAgICAgICAgIGlmIChkZXB0aCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgKytjb3VudDtcbiAgICAgICAgICAgICAgICBjb25zdCBzY29yZSA9IGV2YWxTY29yZShuZXh0Qm9hcmQsIHN0b25lKTtcbiAgICAgICAgICAgICAgICBpZiAoc2NvcmUgPCBsb3dlcilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtzY29yZSwgY291bnRdO1xuICAgICAgICAgICAgICAgIG1pblNjb3JlID0gTWF0aC5taW4obWluU2NvcmUsIHNjb3JlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgW3Njb3JlLCBuXSA9IG1heENhbmRpZGF0ZXMoXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Qm9hcmQsIHN0b25lLCBkZXB0aCAtIDEsIG1pblNjb3JlKTtcbiAgICAgICAgICAgICAgICBjb3VudCArPSBuO1xuICAgICAgICAgICAgICAgIGlmIChzY29yZSA+IE1JTl9TQ09SRSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2NvcmUgPCBsb3dlcilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbc2NvcmUsIGNvdW50XTtcbiAgICAgICAgICAgICAgICAgICAgbWluU2NvcmUgPSBNYXRoLm1pbihtaW5TY29yZSwgc2NvcmUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFtzY29yZTIsIG4yXSA9IG1pbkNhbmRpZGF0ZXMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEJvYXJkLCBzdG9uZSwgZGVwdGggLSAxLCBsb3dlcik7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50ICs9IG4yO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2NvcmUyIDwgTUFYX1NDT1JFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5TY29yZSA9IE1hdGgubWluKG1pblNjb3JlLCBzY29yZTIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFoYXNDYW5kaWRhdGVzKG5leHRCb2FyZCwgc3RvbmUpICYmICFoYXNDYW5kaWRhdGVzKG5leHRCb2FyZCwgcnMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5TY29yZSA9IE1hdGgubWluKG1pblNjb3JlLCBldmFsU2NvcmUobmV4dEJvYXJkLCBzdG9uZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgKytjb3VudDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5leHRCb2FyZCA9IGNsb25lQm9hcmQoYm9hcmQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBbbWluU2NvcmUsIGNvdW50XTtcbn1cblxuZXhwb3J0IHsgY2FuZGlkYXRlTGlzdCB9OyIsIi8qKlxuICogTW9udGUgQ2FybG8gdHJlZSBzZWFyY2ggKE1DVFMpXG4gKi9cbmltcG9ydCB7XG4gICAgQm9hcmQsIFN0b25lLCBDYW5kaWRhdGUsIFxuICAgIHNjYW5DYW5kaWRhdGVzLFxuICAgIGNsb25lQm9hcmQsIHJldmVyc2UsIHB1dFN0b25lLCBldmFsU2NvcmUsIGNvdW50VHVybnNcbn0gZnJvbSAnLi4vYm9hcmQnO1xuXG5pbXBvcnQgKiBhcyBBbHBoYUJldGEgZnJvbSAnLi9hbHBoYWJldGEnO1xuXG5pbnRlcmZhY2UgR2FtZU5vZGUge1xuICAgIGJvYXJkOiBCb2FyZDtcbiAgICBub2RlczogR2FtZU5vZGVbXTtcbiAgICB4OiBudW1iZXIsXG4gICAgeTogbnVtYmVyLFxuICAgIHNjb3JlOiBudW1iZXI7XG4gICAgbjogbnVtYmVyO1xufVxuXG5mdW5jdGlvbiBldmFsVWNiMShub2RlOiBHYW1lTm9kZSwgbjogbnVtYmVyKSB7XG4gICAgY29uc3QgeCA9IG5vZGUuc2NvcmU7XG4gICAgY29uc3QgbmogPSBub2RlLm47XG4gICAgcmV0dXJuIHggLyBuICsgTWF0aC5zcXJ0KDIgKiBNYXRoLmxvZzIobikgLyBuaik7XG59XG5cbmZ1bmN0aW9uIHBsYXlvdXQoYm9hcmQ6IEJvYXJkLCBzdG9uZTogU3RvbmUpIHtcbiAgICBsZXQgY2FuZGlkYXRlcyA9IHNjYW5DYW5kaWRhdGVzKGJvYXJkLCBzdG9uZSk7XG4gICAgd2hpbGUgKGNhbmRpZGF0ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBpbmRleCA9IE1hdGguZmxvb3IoY2FuZGlkYXRlcy5sZW5ndGggKiBNYXRoLnJhbmRvbSgpKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IFt4eV0gPSBjYW5kaWRhdGVzW2luZGV4XTtcbiAgICAgICAgY29uc3QgW3gsIHldID0geHk7XG5cbiAgICAgICAgY29uc3QgZGlmZiA9IHB1dFN0b25lKGJvYXJkLCBzdG9uZSwgeCwgeSk7XG4gICAgICAgIGlmIChkaWZmIDw9IDApIHRocm93IG5ldyBFcnJvcigpO1xuXG4gICAgICAgIHN0b25lID0gcmV2ZXJzZShzdG9uZSk7XG4gICAgICAgIGNhbmRpZGF0ZXMgPSBzY2FuQ2FuZGlkYXRlcyhib2FyZCwgc3RvbmUpO1xuICAgICAgICBpZiAoY2FuZGlkYXRlcy5sZW5ndGggPiAwKSBjb250aW51ZTtcblxuICAgICAgICBzdG9uZSA9IHJldmVyc2Uoc3RvbmUpO1xuICAgICAgICBjYW5kaWRhdGVzID0gc2NhbkNhbmRpZGF0ZXMoYm9hcmQsIHN0b25lKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdhbWVOb2RlKGJvYXJkOiBCb2FyZCwgc3RvbmU6IFN0b25lKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlcyA9IHNjYW5DYW5kaWRhdGVzKGJvYXJkLCBzdG9uZSk7XG5cbiAgICBjb25zdCBub2RlczogR2FtZU5vZGVbXSA9IFtdO1xuICAgIGZvciAoY29uc3QgY2FuZGlkYXRlIG9mIGNhbmRpZGF0ZXMpIHtcbiAgICAgICAgY29uc3QgW3gsIHldID0gY2FuZGlkYXRlWzBdO1xuICAgICAgICBsZXQgbmV4dEJvYXJkID0gY2xvbmVCb2FyZChib2FyZCk7XG4gICAgICAgIGNvbnN0IGRpZmYgPSBwdXRTdG9uZShuZXh0Qm9hcmQsIHN0b25lLCB4LCB5KTtcbiAgICAgICAgaWYgKGRpZmYgPD0gMCkgdGhyb3cgbmV3IEVycm9yKCk7XG5cbiAgICAgICAgY29uc3QgcGxheUJvYXJkID0gY2xvbmVCb2FyZChuZXh0Qm9hcmQpO1xuICAgICAgICBwbGF5b3V0KHBsYXlCb2FyZCwgc3RvbmUpO1xuICAgICAgICBjb25zdCBzY29yZSA9IGV2YWxTY29yZShuZXh0Qm9hcmQsIHN0b25lKTtcblxuICAgICAgICBub2Rlcy5wdXNoKHtcbiAgICAgICAgICAgIGJvYXJkOiBuZXh0Qm9hcmQsXG4gICAgICAgICAgICBub2RlczogW10sXG4gICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgeTogeSxcbiAgICAgICAgICAgIHNjb3JlOiBzY29yZSxcbiAgICAgICAgICAgIG46IDEsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZXM7XG59XG5cbmZ1bmN0aW9uIGNob2ljZU5vZGUobm9kZXM6IEdhbWVOb2RlW10sIHN0b25lOiBTdG9uZSkge1xuICAgIGlmIChub2Rlcy5sZW5ndGggPT0gMCkgdGhyb3cgbmV3IEVycm9yKCk7XG4gXG4gICAgY29uc3Qgc3RvbmUwID0gc3RvbmU7XG5cbiAgICBjb25zdCBmb290cHJpbnRzID0gW107XG4gICAgY29uc3QgdGhyZXNob2xkID0gNDtcbiAgICB3aGlsZSAobm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBzdG9uZSA9IHJldmVyc2Uoc3RvbmUpO1xuXG4gICAgICAgIGxldCBpbmRleCA9IC0xO1xuXG4gICAgICAgIGxldCBuID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgbiArPSBub2Rlc1tpXS5uO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0b25lID09PSBzdG9uZTApIHtcbiAgICAgICAgICAgIGxldCBtYXhTY29yZSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzY29yZSA9IGV2YWxVY2IxKG5vZGVzW2ldLCBuKTtcbiAgICAgICAgICAgICAgICBpZiAobWF4U2NvcmUgPCBzY29yZSkge1xuICAgICAgICAgICAgICAgICAgICBtYXhTY29yZSA9IHNjb3JlO1xuICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IG1pblNjb3JlID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjb3JlID0gZXZhbFVjYjEobm9kZXNbaV0sIG4pO1xuICAgICAgICAgICAgICAgIGlmIChtaW5TY29yZSA+IHNjb3JlKSB7XG4gICAgICAgICAgICAgICAgICAgIG1pblNjb3JlID0gc2NvcmU7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGV4IDwgMCkgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tpbmRleF07XG4gICAgICAgIGZvb3RwcmludHMucHVzaChub2RlKTtcblxuICAgICAgICBzdG9uZSA9IHJldmVyc2Uoc3RvbmUpO1xuXG4gICAgICAgIG5vZGVzID0gbm9kZS5ub2RlcztcbiAgICAgICAgaWYgKG5vZGVzLmxlbmd0aCA9PSAwICYmIG5vZGUubiA+IHRocmVzaG9sZCkge1xuICAgICAgICAgICAgbm9kZS5ub2RlcyA9IGdhbWVOb2RlKG5vZGUuYm9hcmQsIHN0b25lKTtcbiAgICAgICAgICAgIG5vZGVzID0gbm9kZS5ub2RlcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IG5vZGUgPSBmb290cHJpbnRzW2Zvb3RwcmludHMubGVuZ3RoIC0gMV07XG4gICAgY29uc3QgcGxheUJvYXJkID0gY2xvbmVCb2FyZChub2RlLmJvYXJkKTtcbiAgICBwbGF5b3V0KHBsYXlCb2FyZCwgc3RvbmUpO1xuICAgIGNvbnN0IHNjb3JlID0gZXZhbFNjb3JlKHBsYXlCb2FyZCwgc3RvbmUwKTtcbiAgICBmb3IgKGNvbnN0IG4gb2YgZm9vdHByaW50cykge1xuICAgICAgICBuLnNjb3JlICs9IHNjb3JlO1xuICAgICAgICArK24ubjtcbiAgICB9XG59XG5cbmNvbnN0IGxvb3BzID0gNTAwMDtcblxuZnVuY3Rpb24gY2FuZGlkYXRlTGlzdChib2FyZDogQm9hcmQsIHN0b25lOiBTdG9uZSk6IENhbmRpZGF0ZVtdIHtcbiAgICBjb25zdCBub2RlcyA9IGdhbWVOb2RlKGJvYXJkLCBzdG9uZSk7XG4gICAgaWYgKG5vZGVzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIHJldHVybiBbXTsgICAgICAgIFxuICAgIH1cblxuICAgIGNvbnN0IHR1cm5zID0gY291bnRUdXJucyhib2FyZCk7XG4gICAgaWYgKDY0IC0gdHVybnMgPD0gNSkge1xuICAgICAgICBjb25zb2xlLmxvZygnYWxnb3JpdGhtIC0+IGFscGhhLWJldGEnKTtcbiAgICAgICAgcmV0dXJuIEFscGhhQmV0YS5jYW5kaWRhdGVMaXN0KGJvYXJkLCBzdG9uZSwgNSk7XG4gICAgfVxuXG4gICAgbm9kZXMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICBjb25zdCBkeCA9IGEueCAtIGIueDtcbiAgICAgICAgaWYgKGR4ICE9PSAwKSByZXR1cm4gZHg7XG4gICAgICAgIHJldHVybiBhLnkgLSBiLnk7XG4gICAgfSk7XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxvb3BzOyArK2opIHtcbiAgICAgICAgY2hvaWNlTm9kZShub2Rlcywgc3RvbmUpO1xuICAgIH1cblxuICAgIGxldCBzID0gMDtcbiAgICBjb25zdCBjYW5kaWRhdGVzOiBDYW5kaWRhdGVbXSA9IFtdO1xuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBub2Rlcykge1xuICAgICAgICBjYW5kaWRhdGVzLnB1c2goW1tub2RlLngsIG5vZGUueV0sIG5vZGUuc2NvcmUgLyBub2RlLm4sIG5vZGUubl0pO1xuICAgICAgICBzICs9IG5vZGUubjtcbiAgICAgICAgY29uc29sZS5sb2coJ24xJywgbm9kZS54LCBub2RlLnksIG5vZGUubiwgbm9kZS5zY29yZSAvIG5vZGUubik7XG4gICAgfVxuICAgIHJldHVybiBjYW5kaWRhdGVzO1xufVxuXG5leHBvcnQgeyBjYW5kaWRhdGVMaXN0IH07IiwiaW1wb3J0IHtcbiAgICBFLCBCLCBXLFxuICAgIGRpcnMsXG4gICAgTUlOX1NDT1JFLCBNQVhfU0NPUkUsXG4gICAgQm9hcmQsIFN0b25lLCBDYW5kaWRhdGUsXG4gICAgbmV3Qm9hcmQsIHB1dFN0b25lLFxuICAgIHJldmVyc2UsIGhhc0NhbmRpZGF0ZXMsXG4gICAgc2NhbkNhbmRpZGF0ZXMsXG4gICAgZXZhbFNjb3JlLCBjb3VudFR1cm5zLCBjb3VudFN0b25lc1xufSBmcm9tICcuL2JvYXJkJztcbmltcG9ydCB7IGNhbmRpZGF0ZUxpc3QgfSBmcm9tICcuL21ldGhvZC9hbHBoYWJldGEnO1xuaW1wb3J0ICogYXMgTUNUUyBmcm9tICcuL21ldGhvZC9tY3RzJztcblxuZnVuY3Rpb24gYmVzdENhbmRpZGF0ZXMoYm9hcmQ6IEJvYXJkLCBzdG9uZTogU3RvbmUsIGRlcHRoOiBudW1iZXIpIHtcbiAgICBsZXQgYmVzdFBvcyA9IG51bGw7XG4gICAgbGV0IG1heFNjb3JlID0gTUlOX1NDT1JFO1xuXG4gICAgY29uc3QgbGlzdCA9IE1DVFMuY2FuZGlkYXRlTGlzdChib2FyZCwgc3RvbmUpO1xuICAgIGZvciAoY29uc3QgY2FuZGlkYXRlIG9mIGxpc3QpIHtcbiAgICAgICAgY29uc3QgW2lqLCBzY29yZV0gPSBjYW5kaWRhdGU7XG4gICAgICAgIGlmIChtYXhTY29yZSA8IHNjb3JlKSB7XG4gICAgICAgICAgICBtYXhTY29yZSA9IHNjb3JlO1xuICAgICAgICAgICAgYmVzdFBvcyA9IGlqO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBiZXN0UG9zO1xufVxuXG5mdW5jdGlvbiBucGNCZXN0Q2FuZGlkYXRlcyhib2FyZDogQm9hcmQsIHN0b25lOiBTdG9uZSwgYWxnb3JpdGhtOiBzdHJpbmcpIHtcbiAgICBjb25zdCBkZXB0aDogbnVtYmVyID0gNTtcbiAgICBsZXQgbWF4U2NvcmUgPSBNSU5fU0NPUkU7XG4gICAgbGV0IGxpc3QgPSBbXTtcbiAgICBjb25zdCBjYW5kaWRhdGVzID0gY2FuZGlkYXRlTGlzdChib2FyZCwgc3RvbmUsIGRlcHRoKTtcbiAgICBmb3IgKGNvbnN0IGNhbmRpZGF0ZSBvZiBjYW5kaWRhdGVzKSB7XG4gICAgICAgIGNvbnN0IFtpaiwgc2NvcmVdID0gY2FuZGlkYXRlO1xuICAgICAgICBpZiAobWF4U2NvcmUgPCBzY29yZSkge1xuICAgICAgICAgICAgbWF4U2NvcmUgPSBzY29yZTtcbiAgICAgICAgICAgIGxpc3QgPSBbXTtcbiAgICAgICAgICAgIGxpc3QucHVzaChpaik7XG4gICAgICAgIH0gZWxzZSBpZiAobWF4U2NvcmUgPT0gc2NvcmUpIHtcbiAgICAgICAgICAgIGxpc3QucHVzaChpaik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBsaXN0Lmxlbmd0aCk7XG4gICAgcmV0dXJuIGxpc3RbaW5kZXhdO1xufVxuXG5mdW5jdGlvbiBucGMoYm9hcmQ6IEJvYXJkLCBzdG9uZTogU3RvbmUsIGFsZ29yaXRobTogc3RyaW5nKSB7XG4gICAgY29uc29sZS5sb2coJ25wYycsIGFsZ29yaXRobSk7XG5cbiAgICBjb25zdCBucyA9IHJldmVyc2Uoc3RvbmUpO1xuICAgIGlmICghaGFzQ2FuZGlkYXRlcyhib2FyZCwgc3RvbmUpKSB7XG4gICAgICAgIGFsZXJ0KCdOUEMgbXVzdCBwYXNzLicpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGNvbnN0IGlqID0gbnBjQmVzdENhbmRpZGF0ZXMoYm9hcmQsIHN0b25lLCBhbGdvcml0aG0pO1xuICAgICAgICBpZiAoIWlqKSB7XG4gICAgICAgICAgICBhbGVydChcImlsbGVnYWwgc3RhdGUgMVwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IFtpLCBqXSA9IGlqO1xuICAgICAgICBjb25zdCBkaWZmMSA9IHB1dFN0b25lKGJvYXJkLCBzdG9uZSwgaSwgaik7XG4gICAgICAgIGlmIChkaWZmMSA8PSAwKSB7XG4gICAgICAgICAgICBhbGVydChcImlsbGVnYWwgc3RhdGUgMlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzQ2FuZGlkYXRlcyhib2FyZCwgbnMpIHx8ICFoYXNDYW5kaWRhdGVzKGJvYXJkLCBzdG9uZSkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGFsZXJ0KCdZb3UgbXVzdCBwYXNzLicpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYWxlcnRHYW1lUmVzdWx0KGJvYXJkOiBCb2FyZCwgc3RvbmU6IFN0b25lKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNjb3JlID0gZXZhbFNjb3JlKGJvYXJkLCBzdG9uZSk7XG4gICAgICAgIGlmIChzY29yZSA9PSAwKSB7XG4gICAgICAgICAgICBhbGVydChcIkRyYXdcIik7XG4gICAgICAgIH0gZWxzZSBpZiAoc2NvcmUgPiAwKSB7XG4gICAgICAgICAgICBhbGVydChcIldpblwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFsZXJ0KFwiTG9zZVwiKTtcbiAgICAgICAgfVxuICAgIH0sIDEwMCk7XG59XG5cbmNsYXNzIEdhbWUge1xuXG4gICAgLy9zY29yaW5nQWxnb3JpdGhtOiBzdHJpbmcgPSAnYWxwaGFiZXRhJztcbiAgICBzY29yaW5nQWxnb3JpdGhtOiBzdHJpbmcgPSAnbWN0cyc7XG4gICAgbnBjQWxnb3JpdGhtOiBzdHJpbmcgPSAnYWxwaGFiZXRhJztcblxuICAgIHlvdXJTdG9uZTogU3RvbmUgPSBCO1xuICAgIG5wY0VuYWJsZWQ6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgc2VhcmNoRGVwdGg6IG51bWJlciA9IDU7XG4gICAgc2NvcmVWaXNpYmxlOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIHN0b25lOiBTdG9uZTtcbiAgICBib2FyZDogQm9hcmQ7XG5cbiAgICBkaXY6IEhUTUxEaXZFbGVtZW50O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgICAgdGhpcy5ib2FyZCA9IG5ld0JvYXJkKCk7XG4gICAgICAgIHRoaXMuc3RvbmUgPSBCO1xuICAgICAgICB0aGlzLnVwZGF0ZUJvYXJkKHRydWUsIHRoaXMuc2NvcmVWaXNpYmxlKTtcbiAgICB9XG5cbiAgICB1cGRhdGVCb2FyZChidXR0b25FbmFibGVkOiBib29sZWFuLCBzY29yZVZpc2libGU6IGJvb2xlYW4pIHtcbiAgICAgICAgY29uc3QgZGl2ID0gdGhpcy5kaXY7XG4gICAgICAgIGRpdi5pbm5lckhUTUwgPSAnJztcblxuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVCb2FyZERvbShidXR0b25FbmFibGVkLCBzY29yZVZpc2libGUpKTtcbiAgICAgICAgZGl2LmFwcGVuZCh0aGlzLmNyZWF0ZUluZm9Eb20oKSk7XG4gICAgICAgIGRpdi5hcHBlbmQodGhpcy5jcmVhdGVTY29yZURvbSgpKTtcbiAgICAgICAgZGl2LmFwcGVuZCh0aGlzLmNyZWF0ZUNvbnRyb2xsZXJEb20oKSk7XG4gICAgfVxuXG4gICAgY3JlYXRlQ29udHJvbGxlckRvbSgpIHtcbiAgICAgICAgY29uc3QgdGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0YWJsZScpO1xuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCB0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG5cbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICAgICAgICAgIGxhYmVsLmlubmVySFRNTCA9ICdTY29yZSc7XG4gICAgICAgICAgICBsYWJlbC5odG1sRm9yID0gJ3Njb3JlLWNoZWNrJzsgXG5cbiAgICAgICAgICAgIGNvbnN0IHRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGgnKTtcbiAgICAgICAgICAgIHRoLmFwcGVuZENoaWxkKGxhYmVsKTtcbiAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKHRoKTtcblxuICAgICAgICAgICAgY29uc3QgY2hlY2tib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICAgICAgY2hlY2tib3guaWQgPSAnc2NvcmUtY2hlY2snXG4gICAgICAgICAgICBjaGVja2JveC50eXBlID0gJ2NoZWNrYm94JztcbiAgICAgICAgICAgIGNoZWNrYm94Lm9uY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjaGVja2JveC5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NvcmVWaXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjb3JlVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUJvYXJkKHRydWUsIHRoaXMuc2NvcmVWaXNpYmxlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjaGVja2JveC5jaGVja2VkID0gdGhpcy5zY29yZVZpc2libGU7XG4gICAgICAgICAgICBjaGVja2JveC5jbGFzc05hbWUgPSAnY29udHJvbCc7XG5cbiAgICAgICAgICAgIGNvbnN0IHRkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgICAgIHRkLmFwcGVuZENoaWxkKGNoZWNrYm94KTtcbiAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKHRkKTtcblxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XG4gICAgICAgICAgICBzZWxlY3QuaWQgPSAnc2NvcmUtYWxnb3JpdGhtJ1xuICAgICAgICAgICAgZm9yIChjb25zdCBhbGdvcml0aG0gb2YgWydhbHBoYWJldGEnLCAnbWN0cyddKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICAgICAgICAgICAgb3B0aW9uLmlubmVySFRNTCA9IGFsZ29yaXRobS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIG9wdGlvbi52YWx1ZSA9IGFsZ29yaXRobS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIHNlbGVjdC5hcHBlbmRDaGlsZChvcHRpb24pO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjb3JpbmdBbGdvcml0aG0gPT0gYWxnb3JpdGhtKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZWN0Lm9uY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb3B0IG9mIHNlbGVjdC5zZWxlY3RlZE9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY29yaW5nQWxnb3JpdGhtID0gb3B0LnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2FsZ29yaXRobTogJywgdGhpcy5zY29yaW5nQWxnb3JpdGhtKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zY29yZVZpc2libGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVCb2FyZCh0cnVlLCB0aGlzLnNjb3JlVmlzaWJsZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHNlbGVjdC5jbGFzc05hbWUgPSAnY29udHJvbCc7XG5cbiAgICAgICAgICAgIGNvbnN0IHRkU2NvcmluZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgICAgICB0ZFNjb3JpbmcuYXBwZW5kQ2hpbGQoc2VsZWN0KTtcbiAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKHRkU2NvcmluZyk7XG5cbiAgICAgICAgICAgIHRhYmxlLmFwcGVuZENoaWxkKHRyKTtcbiAgICAgICAgfVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCB0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG5cbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICAgICAgICAgIGxhYmVsLmlubmVySFRNTCA9ICdOUEMnO1xuICAgICAgICAgICAgbGFiZWwuaHRtbEZvciA9ICducGMtY2hlY2snOyBcblxuICAgICAgICAgICAgY29uc3QgdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aCcpO1xuICAgICAgICAgICAgdGguYXBwZW5kQ2hpbGQobGFiZWwpO1xuICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGgpO1xuXG4gICAgICAgICAgICBjb25zdCBjaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgICAgICBjaGVja2JveC5pZCA9ICducGMtY2hlY2snO1xuICAgICAgICAgICAgY2hlY2tib3gudHlwZSA9ICdjaGVja2JveCc7XG4gICAgICAgICAgICBjaGVja2JveC5vbmNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tib3guY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5wY0VuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubnBjRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjaGVja2JveC5jaGVja2VkID0gdGhpcy5ucGNFbmFibGVkO1xuICAgICAgICAgICAgY2hlY2tib3guY2xhc3NOYW1lID0gJ2NvbnRyb2wnO1xuXG4gICAgICAgICAgICBjb25zdCB0ZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgICAgICB0ZC5hcHBlbmRDaGlsZChjaGVja2JveCk7XG4gICAgICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlbGVjdCcpO1xuICAgICAgICAgICAgc2VsZWN0LmlkID0gJ3Njb3JlLWFsZ29yaXRobSdcbiAgICAgICAgICAgIGZvciAoY29uc3QgYWxnb3JpdGhtIG9mIFsnYWxwaGFiZXRhJywgJ21jdHMnXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgICAgICAgICAgICAgIG9wdGlvbi5pbm5lckhUTUwgPSBhbGdvcml0aG0udG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBvcHRpb24udmFsdWUgPSBhbGdvcml0aG0udG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBzZWxlY3QuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ucGNBbGdvcml0aG0gPT0gYWxnb3JpdGhtKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZWN0Lm9uY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb3B0IG9mIHNlbGVjdC5zZWxlY3RlZE9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ucGNBbGdvcml0aG0gPSBvcHQudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnYWxnb3JpdGhtOiAnLCB0aGlzLm5wY0FsZ29yaXRobSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2NvcmVWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQm9hcmQodHJ1ZSwgdGhpcy5zY29yZVZpc2libGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzZWxlY3QuY2xhc3NOYW1lID0gJ2NvbnRyb2wnO1xuXG4gICAgICAgICAgICBjb25zdCB0ZEFsZ29yaXRobSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgICAgICB0ZEFsZ29yaXRobS5hcHBlbmRDaGlsZChzZWxlY3QpO1xuICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGRBbGdvcml0aG0pO1xuXG4gICAgICAgICAgICB0YWJsZS5hcHBlbmRDaGlsZCh0cik7XG4gICAgICAgIH1cbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgdHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuXG4gICAgICAgICAgICBjb25zdCB0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoJyk7XG4gICAgICAgICAgICB0ci5hcHBlbmRDaGlsZCh0aCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGJ1dHRvblJlc2V0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgIGJ1dHRvblJlc2V0LnR5cGUgPSAnYnV0dG9uJztcbiAgICAgICAgICAgIGJ1dHRvblJlc2V0LnZhbHVlID0gJ1Jlc2V0JztcbiAgICAgICAgICAgIGJ1dHRvblJlc2V0Lm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5ib2FyZCA9IG5ld0JvYXJkKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9uZSA9IEI7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVCb2FyZCh0cnVlLCB0aGlzLnNjb3JlVmlzaWJsZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYnV0dG9uUmVzZXQuY2xhc3NOYW1lID0gJ2NvbnRyb2wnO1xuXG4gICAgICAgICAgICBjb25zdCB0ZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgICAgICB0ZC5hcHBlbmRDaGlsZChidXR0b25SZXNldCk7XG4gICAgICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZCk7XG4gICAgICAgICAgICB0YWJsZS5hcHBlbmRDaGlsZCh0cik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFibGU7XG4gICAgfVxuXG4gICAgY3JlYXRlSW5mb0RvbSgpIHtcbiAgICAgICAgY29uc3QgdGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGFibGVcIik7XG5cbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgdHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidHJcIik7XG5cbiAgICAgICAgICAgIGNvbnN0IHRoTmV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoJyk7XG4gICAgICAgICAgICB0aE5leHQuY2xhc3NOYW1lID0gJ2luZm8nO1xuICAgICAgICAgICAgdGhOZXh0LmlubmVySFRNTCA9ICdOZXh0JztcbiAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKHRoTmV4dCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHRoVHVybiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoJyk7XG4gICAgICAgICAgICB0aFR1cm4uY2xhc3NOYW1lID0gJ2luZm8nO1xuICAgICAgICAgICAgdGhUdXJuLmlubmVySFRNTCA9ICdUdXJuJztcbiAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKHRoVHVybik7XG5cbiAgICAgICAgICAgIHRhYmxlLmFwcGVuZENoaWxkKHRyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0b25lICE9PSBFXG4gICAgICAgICAgICAgICAgICAgICYmICFoYXNDYW5kaWRhdGVzKHRoaXMuYm9hcmQsIHRoaXMuc3RvbmUpXG4gICAgICAgICAgICAgICAgICAgICYmICFoYXNDYW5kaWRhdGVzKHRoaXMuYm9hcmQsIHJldmVyc2UodGhpcy5zdG9uZSkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9uZSA9IEU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xuXG4gICAgICAgICAgICBjb25zdCB0ZE5leHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RvbmUgPT0gQikge1xuICAgICAgICAgICAgICAgIHRkTmV4dC5jbGFzc05hbWUgPSAnYiBpbmZvJztcbiAgICAgICAgICAgICAgICB0ZE5leHQuaW5uZXJIVE1MID0gJ+KXjyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RvbmUgPT0gVykge1xuICAgICAgICAgICAgICAgIHRkTmV4dC5jbGFzc05hbWUgPSAndyBpbmZvJztcbiAgICAgICAgICAgICAgICB0ZE5leHQuaW5uZXJIVE1MID0gJ+KXjyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRkTmV4dC5pbm5lckhUTUwgPSAnR2FtZSBFbmQnO1xuICAgICAgICAgICAgICAgIHRkTmV4dC5jbGFzc05hbWUgPSAnaW5mbyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZE5leHQpO1xuXG4gICAgICAgICAgICBjb25zdCB0ZFR1cm4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgICAgICAgdGRUdXJuLmNsYXNzTmFtZSA9ICdpbmZvJztcblxuICAgICAgICAgICAgY29uc3Qgc3RvbmVzID0gY291bnRUdXJucyh0aGlzLmJvYXJkKTtcbiAgICAgICAgICAgIHRkVHVybi5pbm5lckhUTUwgPSAoc3RvbmVzIC0gMykudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKHRkVHVybik7XG5cbiAgICAgICAgICAgIHRhYmxlLmFwcGVuZENoaWxkKHRyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFibGU7XG4gICAgfVxuXG4gICAgY3JlYXRlU2NvcmVEb20oKSB7XG4gICAgICAgIGNvbnN0IHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRhYmxlXCIpO1xuXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xuXG4gICAgICAgICAgICBjb25zdCB0aE5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aCcpO1xuICAgICAgICAgICAgdGhOYW1lLmNsYXNzTmFtZSA9ICdzY29yZSc7XG4gICAgICAgICAgICB0aE5hbWUuaW5uZXJIVE1MID0gJ05hbWUnO1xuICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGhOYW1lKTtcblxuICAgICAgICAgICAgY29uc3QgdGhCbGFjayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoJyk7XG4gICAgICAgICAgICB0aEJsYWNrLmNsYXNzTmFtZSA9ICdzY29yZSc7XG4gICAgICAgICAgICB0aEJsYWNrLmlubmVySFRNTCA9ICdCbGFjayc7XG4gICAgICAgICAgICB0ci5hcHBlbmRDaGlsZCh0aEJsYWNrKTtcblxuICAgICAgICAgICAgY29uc3QgdGhXaGl0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoJyk7XG4gICAgICAgICAgICB0aFdoaXRlLmNsYXNzTmFtZSA9ICdzY29yZSc7XG4gICAgICAgICAgICB0aFdoaXRlLmlubmVySFRNTCA9ICdXaGl0ZSc7XG4gICAgICAgICAgICB0ci5hcHBlbmRDaGlsZCh0aFdoaXRlKTtcblxuICAgICAgICAgICAgdGFibGUuYXBwZW5kQ2hpbGQodHIpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBiU3RvbmVzID0gY291bnRTdG9uZXModGhpcy5ib2FyZCwgQik7XG4gICAgICAgIGNvbnN0IHdTdG9uZXMgPSBjb3VudFN0b25lcyh0aGlzLmJvYXJkLCBXKTtcbiAgICAgICAgXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xuXG4gICAgICAgICAgICBjb25zdCB0ZExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgICAgIHRkTGFiZWwuY2xhc3NOYW1lID0gJ3Njb3JlJztcbiAgICAgICAgICAgIHRkTGFiZWwuaW5uZXJIVE1MID0gJ1N0b25lcyc7XG4gICAgICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZExhYmVsKTtcbiAgICBcbiAgICAgICAgICAgIGNvbnN0IHRkQmxhY2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgICAgICAgdGRCbGFjay5jbGFzc05hbWUgPSAnc2NvcmUnO1xuICAgICAgICAgICAgdGRCbGFjay5pbm5lckhUTUwgPSBiU3RvbmVzLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZEJsYWNrKTtcbiAgICBcbiAgICAgICAgICAgIGNvbnN0IHRkV2hpdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgICAgICAgdGRXaGl0ZS5jbGFzc05hbWUgPSAnc2NvcmUnO1xuICAgICAgICAgICAgdGRXaGl0ZS5pbm5lckhUTUwgPSB3U3RvbmVzLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZFdoaXRlKTtcblxuICAgICAgICAgICAgdGFibGUuYXBwZW5kQ2hpbGQodHIpO1xuICAgICAgICB9XG5cbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgdHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidHJcIik7XG5cbiAgICAgICAgICAgIGNvbnN0IHRkTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgICAgICAgdGRMYWJlbC5jbGFzc05hbWUgPSAnc2NvcmUnO1xuICAgICAgICAgICAgdGRMYWJlbC5pbm5lckhUTUwgPSAnU2NvcmUnO1xuICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGRMYWJlbCk7XG4gICAgXG4gICAgICAgICAgICBjb25zdCB0ZEJsYWNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgICAgIHRkQmxhY2suY2xhc3NOYW1lID0gJ3Njb3JlJztcbiAgICAgICAgICAgIHRkQmxhY2suaW5uZXJIVE1MID0gKGJTdG9uZXMgLSB3U3RvbmVzKS50b1N0cmluZygpO1xuICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGRCbGFjayk7XG4gICAgXG4gICAgICAgICAgICBjb25zdCB0ZFdoaXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgICAgIHRkV2hpdGUuY2xhc3NOYW1lID0gJ3Njb3JlJztcbiAgICAgICAgICAgIHRkV2hpdGUuaW5uZXJIVE1MID0gKHdTdG9uZXMgLSBiU3RvbmVzKS50b1N0cmluZygpO1xuICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGRXaGl0ZSk7XG4gICAgICAgICAgICB0YWJsZS5hcHBlbmRDaGlsZCh0cik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFibGU7XG4gICAgfVxuXG4gICAgY3JlYXRlQm9hcmREb20oYnV0dG9uRW5hYmxlZDogYm9vbGVhbiwgc2NvcmVWaXNpYmxlOiBib29sZWFuKSB7XG4gICAgICAgIGNvbnN0IHlvdXJTdG9uZSA9IHRoaXMueW91clN0b25lO1xuICAgICAgICBjb25zdCB0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0YWJsZVwiKTtcbiAgICAgICAgdGFibGUuY2xhc3NOYW1lID0gJ2JvYXJkJztcbiAgICBcbiAgICAgICAgY29uc3QgcyA9IHRoaXMuc3RvbmU7XG5cbiAgICAgICAgY29uc3QgbWN0c0VuYWJsZWQgPSB0cnVlO1xuXG4gICAgICAgIGxldCBsaXN0OiBDYW5kaWRhdGVbXTtcbiAgICAgICAgaWYgKHNjb3JlVmlzaWJsZSAmJiBidXR0b25FbmFibGVkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnc2NvcmluZycsIHRoaXMuc2NvcmluZ0FsZ29yaXRobSk7XG4gICAgICAgICAgICBpZiAodGhpcy5zY29yaW5nQWxnb3JpdGhtID09PSAnbWN0cycpIHtcbiAgICAgICAgICAgICAgICBsaXN0ID0gTUNUUy5jYW5kaWRhdGVMaXN0KHRoaXMuYm9hcmQsIHMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnNjb3JpbmdBbGdvcml0aG0gPT09ICdhbHBoYWJldGEnKSB7XG4gICAgICAgICAgICAgICAgbGlzdCA9IGNhbmRpZGF0ZUxpc3QodGhpcy5ib2FyZCwgcywgdGhpcy5zZWFyY2hEZXB0aCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYWxnb3JpdGhtOiAnKyB0aGlzLnNjb3JpbmdBbGdvcml0aG0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvbkVuYWJsZWQpIHtcbiAgICAgICAgICAgIGxpc3QgPSBzY2FuQ2FuZGlkYXRlcyh0aGlzLmJvYXJkLCBzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpc3QgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0b3RhbENvdW50ID0gMDtcbiAgICAgICAgbGV0IG1heFNjb3JlID0gTUlOX1NDT1JFO1xuICAgICAgICBmb3IgKGNvbnN0IGNhbmRpZGF0ZSBvZiBsaXN0KSB7XG4gICAgICAgICAgICBjb25zdCBbaWosIHNjb3JlLCBjb3VudF0gPSBjYW5kaWRhdGU7XG4gICAgICAgICAgICBtYXhTY29yZSA9IE1hdGgubWF4KG1heFNjb3JlLCBzY29yZSk7XG4gICAgICAgICAgICB0b3RhbENvdW50ICs9IGNvdW50O1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA4OyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xuICAgICAgICAgICAgdHIuY2xhc3NOYW1lID0gJ2JvYXJkJztcbiAgICAgICAgICAgIHRhYmxlLmFwcGVuZENoaWxkKHRyKTtcbiAgICBcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgODsgKytqKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RvbmUgPSB0aGlzLmJvYXJkW2ldW2pdO1xuICAgICAgICAgICAgICAgIGlmIChzdG9uZSA9PT0gQikge1xuICAgICAgICAgICAgICAgICAgICB0ZC5pbm5lckhUTUwgPSAn4pePJztcbiAgICAgICAgICAgICAgICAgICAgdGQuY2xhc3NOYW1lID0gJ2JvYXJkIGInO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RvbmUgPT0gVykge1xuICAgICAgICAgICAgICAgICAgICB0ZC5pbm5lckhUTUwgPSAn4pePJztcbiAgICAgICAgICAgICAgICAgICAgdGQuY2xhc3NOYW1lID0gJ2JvYXJkIHcnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRkLmNsYXNzTmFtZSA9ICdib2FyZCc7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzY29yZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZGF0YSBvZiBsaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBbaTEsIGoxXSA9IGRhdGFbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaTEgPT09IGkgJiYgajEgPT09IGopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZSA9IGRhdGFbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjb3JlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi50eXBlID0gJ2J1dHRvbic7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY29yZSA9PSBNSU5fU0NPUkUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uY2xhc3NOYW1lID0gJ2NhbmRpZGF0ZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLnZhbHVlID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNjb3JlID09IG1heFNjb3JlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMgPT09IEIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmNsYXNzTmFtZSA9ICdiZXN0LWNhbmRpZGF0ZS1iJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLnZhbHVlID0gTWF0aC5yb3VuZChzY29yZSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHMgPT09IFcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmNsYXNzTmFtZSA9ICdiZXN0LWNhbmRpZGF0ZS13JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLnZhbHVlID0gTWF0aC5yb3VuZChzY29yZSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzID09PSBCKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5jbGFzc05hbWUgPSAnY2FuZGlkYXRlLWInO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24udmFsdWUgPSBNYXRoLnJvdW5kKHNjb3JlKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocyA9PT0gVykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uY2xhc3NOYW1lID0gJ2NhbmRpZGF0ZS13JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLnZhbHVlID0gTWF0aC5yb3VuZChzY29yZSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b24ub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaWZmID0gcHV0U3RvbmUodGhpcy5ib2FyZCwgdGhpcy5zdG9uZSwgaSwgaik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpZmYgPD0gMCkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVCb2FyZChmYWxzZSwgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbnMgPSByZXZlcnNlKHRoaXMuc3RvbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaGFzQ2FuZGlkYXRlcyh0aGlzLmJvYXJkLCB0aGlzLnN0b25lKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgIWhhc0NhbmRpZGF0ZXModGhpcy5ib2FyZCwgbnMpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b25lID0gRTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnRHYW1lUmVzdWx0KHRoaXMuYm9hcmQsIHlvdXJTdG9uZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUJvYXJkKGZhbHNlLCBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubnBjRW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnBjKHRoaXMuYm9hcmQsIG5zLCB0aGlzLm5wY0FsZ29yaXRobSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc0NhbmRpZGF0ZXModGhpcy5ib2FyZCwgdGhpcy5zdG9uZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b25lID0gRTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydEdhbWVSZXN1bHQodGhpcy5ib2FyZCwgeW91clN0b25lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNDYW5kaWRhdGVzKHRoaXMuYm9hcmQsIG5zKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvbmUgPSBucztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWhhc0NhbmRpZGF0ZXModGhpcy5ib2FyZCwgdGhpcy5zdG9uZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b25lID0gRTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUJvYXJkKHRydWUsIHRoaXMuc2NvcmVWaXNpYmxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAxMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZC5hcHBlbmRDaGlsZChidXR0b24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKHRkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFibGU7XG4gICAgfVxufVxuXG5leHBvcnQgeyBHYW1lLCBTdG9uZSwgQiwgVywgRSB9OyIsImltcG9ydCB7IEdhbWUgfSBmcm9tIFwiLi9HYW1lXCI7XG5pbXBvcnQgJy4vc3R5bGUuY3NzJztcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IHtcbiAgICBpbml0KCk7XG59KTtcblxuZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBjb25zdCBnYW1lID0gbmV3IEdhbWUoKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGdhbWUuZGl2KTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=