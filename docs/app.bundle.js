!function(e){var n={};function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)t.d(o,r,function(n){return e[n]}.bind(null,r));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=4)}([function(e,n,t){"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=function(e,n){var t=e[1]||"",o=e[3];if(!o)return t;if(n&&"function"==typeof btoa){var r=(c=o,s=btoa(unescape(encodeURIComponent(JSON.stringify(c)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(a," */")),i=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([r]).join("\n")}var c,s,a;return[t].join("\n")}(n,e);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(r[c]=!0)}for(var s=0;s<e.length;s++){var a=[].concat(e[s]);o&&r[a[0]]||(t&&(a[2]?a[2]="".concat(t," and ").concat(a[2]):a[2]=t),n.push(a))}},n}},function(e,n,t){var o=t(2),r=t(3);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var i={insert:"head",singleton:!1};o(r,i);e.exports=r.locals||{}},function(e,n,t){"use strict";var o,r=function(){return void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o},i=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),c=[];function s(e){for(var n=-1,t=0;t<c.length;t++)if(c[t].identifier===e){n=t;break}return n}function a(e,n){for(var t={},o=[],r=0;r<e.length;r++){var i=e[r],a=n.base?i[0]+n.base:i[0],l=t[a]||0,d="".concat(a," ").concat(l);t[a]=l+1;var h=s(d),A={css:i[1],media:i[2],sourceMap:i[3]};-1!==h?(c[h].references++,c[h].updater(A)):c.push({identifier:d,updater:m(A,n),references:1}),o.push(d)}return o}function l(e){var n=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var r=t.nc;r&&(o.nonce=r)}if(Object.keys(o).forEach((function(e){n.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(n);else{var c=i(e.insert||"head");if(!c)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");c.appendChild(n)}return n}var d,h=(d=[],function(e,n){return d[e]=n,d.filter(Boolean).join("\n")});function A(e,n,t,o){var r=t?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=h(n,r);else{var i=document.createTextNode(r),c=e.childNodes;c[n]&&e.removeChild(c[n]),c.length?e.insertBefore(i,c[n]):e.appendChild(i)}}function u(e,n,t){var o=t.css,r=t.media,i=t.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),i&&btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var f=null,p=0;function m(e,n){var t,o,r;if(n.singleton){var i=p++;t=f||(f=l(n)),o=A.bind(null,t,i,!1),r=A.bind(null,t,i,!0)}else t=l(n),o=u.bind(null,t,n),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return o(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;o(e=n)}else r()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=r());var t=a(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<t.length;o++){var r=s(t[o]);c[r].references--}for(var i=a(e,n),l=0;l<t.length;l++){var d=s(t[l]);0===c[d].references&&(c[d].updater(),c.splice(d,1))}t=i}}}},function(e,n,t){"use strict";t.r(n);var o=t(0),r=t.n(o)()(!0);r.push([e.i,"body {\n    margin: 0;\n    overflow: hidden;\n    background-color: #AAA;\n}\n\ninput {\n    vertical-align: middle;\n}\n\n.control {\n    background-color: #CCC;\n    color: black;\n    border: solid 0;\n    font-size: 10pt;\n    vertical-align: middle;\n}\n\n.b {\n    color: #000;\n    font-size: 16pt;\n    text-align: center;\n}\n\n.w {\n    color: #fff;\n    font-size: 16pt;\n    text-align: center;\n}\n\n.candidate {\n    background-color: #090;\n    border: solid 0;\n    font-size: 12pt;\n    color: green;\n    width: 100%;\n    height: 100%;\n}\n\n.candidate-b {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #090;\n    width: 100%;\n    height: 100%;\n    color: #222;\n}\n.candidate-w {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #090;\n    width: 100%;\n    height: 100%;\n    color: #DDD;\n}\n\n.best-candidate-b {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #0B0;\n    width: 100%;\n    height: 100%;\n    color: #000;\n    font-weight: bold;\n}\n.best-candidate-w {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #0B0;\n    width: 100%;\n    height: 100%;\n    color: #fff;\n    font-weight: bold;\n}\n\nul {\n    list-style-type: none;\n}\n\n.score {\n    color: #000;\n}\n\ntable.board {\n    float: left;\n    padding: 0px;\n    margin: 5px;\n    border-collapse: none;\n    border-spacing: 0;\n}\n\ntr.board {\n    border-collapse: none;\n    border-spacing: 0;\n    padding: 0px;\n    margin: 0px;\n}\n\ntd.board {\n    width: 5;\n    height: 5;\n    padding: 0px;\n    margin: 1px;\n    width: 50px;\n    height: 50px;\n    background-color: green;\n    border: 1px solid #bbb;\n    text-align: center;\n}\n\nth.score, td.score {\n    width: 75px;\n    font-size: 10pt;\n    text-align: right;\n}\n\nth.info, td.info {\n    width: 75px;\n    font-size: 10pt;\n    text-align: right;\n}","",{version:3,sources:["style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,gBAAgB;IAChB,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;IACtB,YAAY;IACZ,eAAe;IACf,eAAe;IACf,sBAAsB;AAC1B;;AAEA;IACI,WAAW;IACX,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,sBAAsB;IACtB,eAAe;IACf,eAAe;IACf,YAAY;IACZ,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,eAAe;IACf,eAAe;IACf,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,WAAW;AACf;AACA;IACI,eAAe;IACf,eAAe;IACf,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,eAAe;IACf,eAAe;IACf,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,WAAW;IACX,iBAAiB;AACrB;AACA;IACI,eAAe;IACf,eAAe;IACf,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,WAAW;IACX,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;IACI,qBAAqB;IACrB,iBAAiB;IACjB,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,QAAQ;IACR,SAAS;IACT,YAAY;IACZ,WAAW;IACX,WAAW;IACX,YAAY;IACZ,uBAAuB;IACvB,sBAAsB;IACtB,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,eAAe;IACf,iBAAiB;AACrB",file:"style.css",sourcesContent:["body {\n    margin: 0;\n    overflow: hidden;\n    background-color: #AAA;\n}\n\ninput {\n    vertical-align: middle;\n}\n\n.control {\n    background-color: #CCC;\n    color: black;\n    border: solid 0;\n    font-size: 10pt;\n    vertical-align: middle;\n}\n\n.b {\n    color: #000;\n    font-size: 16pt;\n    text-align: center;\n}\n\n.w {\n    color: #fff;\n    font-size: 16pt;\n    text-align: center;\n}\n\n.candidate {\n    background-color: #090;\n    border: solid 0;\n    font-size: 12pt;\n    color: green;\n    width: 100%;\n    height: 100%;\n}\n\n.candidate-b {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #090;\n    width: 100%;\n    height: 100%;\n    color: #222;\n}\n.candidate-w {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #090;\n    width: 100%;\n    height: 100%;\n    color: #DDD;\n}\n\n.best-candidate-b {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #0B0;\n    width: 100%;\n    height: 100%;\n    color: #000;\n    font-weight: bold;\n}\n.best-candidate-w {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #0B0;\n    width: 100%;\n    height: 100%;\n    color: #fff;\n    font-weight: bold;\n}\n\nul {\n    list-style-type: none;\n}\n\n.score {\n    color: #000;\n}\n\ntable.board {\n    float: left;\n    padding: 0px;\n    margin: 5px;\n    border-collapse: none;\n    border-spacing: 0;\n}\n\ntr.board {\n    border-collapse: none;\n    border-spacing: 0;\n    padding: 0px;\n    margin: 0px;\n}\n\ntd.board {\n    width: 5;\n    height: 5;\n    padding: 0px;\n    margin: 1px;\n    width: 50px;\n    height: 50px;\n    background-color: green;\n    border: 1px solid #bbb;\n    text-align: center;\n}\n\nth.score, td.score {\n    width: 75px;\n    font-size: 10pt;\n    text-align: right;\n}\n\nth.info, td.info {\n    width: 75px;\n    font-size: 10pt;\n    text-align: right;\n}"]}]),n.default=r},function(e,n,t){"use strict";t.r(n);const o=-1,r=[[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]];function i(e,n){const t=[];for(let o=0;o<8;++o)for(let i=0;i<8;++i)if(0==e[i][o])for(const s of r){const[r,a]=s;if(c(e,n,i,o,r,a)){t.push([[i,o],-65,0]);break}}return t}function c(e,n,t,o,r,i){const c=h(n);let s=0,a=t,l=o;for(;a+=r,l+=i,u(a,l);){const t=e[a][l];if(t!==c){if(t===n&&s>0)return!0;break}s++}return!1}function s(e,n){let t=0;for(let o=0;o<8;++o)for(let r=0;r<8;++r)e[o][r]==n&&++t;return t}function a(e){let n=0;for(let t=0;t<8;++t)for(let o=0;o<8;++o)0!==e[t][o]&&++n;return n-3}function l(e,n){let t=0;for(let o=0;o<8;++o)for(let r=0;r<8;++r){const i=e[o][r];i===n?++t:0!==i&&--t}return t}function d(e){const n=new Array(8);for(let t=0;t<8;++t){const o=e[t],r=new Array(8);for(let e=0;e<8;++e)r[e]=o[e];n[t]=r}return n}function h(e){return-1*e}function A(e,n,t,o){if(0!=e[t][o])return 0;let i=0;for(const c of r){const[r,s]=c;let a=0,l=t,d=o;for(;l+=r,d+=s,u(l,d);){const c=e[l][d];if(0===c)break;if(c===n){a>0&&(f(e,c,t,o,r,s,a),i+=a);break}a++}}return i>0&&(e[t][o]=n),i}function u(e,n){return 0<=e&&e<8&&0<=n&&n<8}function f(e,n,t,o,r,i,c){for(let s=0;s<c;++s)o+=i,e[t+=r][o]=n}function p(e,n){for(let t=0;t<8;++t)for(let o=0;o<8;++o)if(0==e[t][o])for(const i of r){const[r,c]=i;let s=1;for(;;){const i=t+r*s,a=o+c*s;if(!u(i,a))break;const l=e[i][a];if(0===l)break;if(l===n){if(s>1)return!0;break}s++}}return!1}function m(){const e=new Array(8);for(let n=0;n<e.length;++n)e[n]=new Array(8).fill(0);return e[3][3]=1,e[3][4]=o,e[4][3]=o,e[4][4]=1,e}function b(e,n,t){const o=h(n),r=[];let i=d(e);for(let c=0;c<8;++c)for(let s=0;s<8;++s){if(!(A(i,n,c,s)<=0)){if(t<=0)r.push([[c,s],-65,1]);else{const[e,a]=C(i,n,t-1,-65);if(e<65)r.push([[c,s],e,a]);else{const[e,a]=g(i,n,t-1,-65);e>-65?r.push([[c,s],e,a]):p(i,n)||p(i,o)||r.push([[c,s],l(i,n),1])}}i=d(e)}}return r}function g(e,n,t,o){const r=h(n);let i=0,c=-65,s=d(e);for(let a=0;a<8;++a)for(let h=0;h<8;++h){if(!(A(s,n,a,h)<=0)){if(t<=0){++i;const e=l(s,n);if(e>o)return[e,i];c=Math.max(c,e)}else{const[e,a]=C(s,n,t-1,c);if(i+=a,e<65){if(e>o)return[e,i];c=Math.max(c,e)}else{const[e,a]=g(s,n,t-1,o);if(i+=a,e>o)return[e,i];e>-65?c=Math.max(c,e):p(s,n)||p(s,r)||(c=Math.max(c,l(s,n)),++i)}}s=d(e)}}return[c,i]}function C(e,n,t,o){const r=h(n);let i=0,c=65,s=d(e);for(let a=0;a<8;++a)for(let h=0;h<8;++h){if(!(A(s,r,a,h)<=0)){if(t<=0){++i;const e=l(s,n);if(e<o)return[e,i];c=Math.min(c,e)}else{const[e,a]=g(s,n,t-1,c);if(i+=a,e>-65){if(e<o)return[e,i];c=Math.min(c,e)}else{const[e,a]=C(s,n,t-1,o);i+=a,e<65?c=Math.min(c,e):p(s,n)||p(s,r)||(c=Math.min(c,l(s,n)),++i)}}s=d(e)}}return[c,i]}function I(e,n){const t=e.score,o=e.n;return t/n+Math.sqrt(2*Math.log2(n)/o)}function B(e,n){let t=i(e,n);for(0==t.length&&(t=i(e,n=h(n)));t.length>0;){const o=Math.floor(t.length*Math.random()),[r]=t[o],[c,s]=r;if(A(e,n,c,s)<=0)throw new Error;t=i(e,n=h(n)),t.length>0||(t=i(e,n=h(n)))}}function E(e,n){const t=i(e,n),o=h(n),r=[];for(const i of t){const[t,c]=i[0];let s=d(e);if(A(s,n,t,c)<=0)throw new Error;B(d(s),n);const a=l(s,n);r.push({board:s,stone:o,nodes:[],x:t,y:c,score:a,n:1})}return r}function v(e,n){if(0==e.length)throw new Error;const t=n,o=[];for(;e.length>0;){let r=-1,i=0;for(let n=0;n<e.length;++n)i+=e[n].n;if(n===t){let n=Number.NEGATIVE_INFINITY;for(let t=0;t<e.length;++t){const o=I(e[t],i);n<o&&(n=o,r=t)}}else{let n=Number.POSITIVE_INFINITY;for(let t=0;t<e.length;++t){const o=I(e[t],i);n>o&&(n=o,r=t)}}if(r<0)throw new Error;const c=e[r];o.push(c),n=c.stone,0==(e=c.nodes).length&&c.n>4&&(c.nodes=E(c.board,n),0==c.nodes.length&&(n=h(n),c.nodes=E(c.board,h(n)),n=h(n),c.stone=n),e=c.nodes)}const r=d(o[o.length-1].board);B(r,n);const i=l(r,t);for(const e of o)e.score+=i,++e.n}function w(e,n,t){const o=E(e,n);if(0==o.length)return[];const r=a(e);if(1==r)return b(e,n,0);if(64-r<=5)return console.log("algorithm -> alpha-beta"),b(e,n,5);o.sort((e,n)=>{const t=e.x-n.x;return 0!==t?t:e.y-n.y});for(let e=0;e<t;++e)v(o,n);let i=0;const c=[];for(const e of o)c.push([[e.x,e.y],e.score/e.n,e.n]),i+=e.n;return c}function y(e,n){h(n);let t=d(e),o=0,r=[];for(let i=0;i<8;++i)for(let c=0;c<8;++c){const s=A(t,n,i,c);s<=0||(o<s?(o=s,r=[],r.push([[i,c],s,1])):o===s&&r.push([[i,c],s,1]),t=d(e))}return r}function M(e,n,t){let o,r=-65,i=[];if("mcts"===t){o=w(e,n,1e4)}else if("alphabeta"===t){o=b(e,n,5)}else{if("mcts"!==t)throw new Error;o=y(e,n)}for(const e of o){const[n,t]=e;r<t?(r=t,i=[],i.push(n)):r==t&&i.push(n)}return i[Math.floor(Math.random()*i.length)]}function x(e,n,t){console.log("npc",t);const o=h(n);if(p(e,n))for(;;){const r=M(e,n,t);if(!r)return void alert("illegal state 1");const[i,c]=r;if(A(e,n,i,c)<=0&&alert("illegal state 2"),p(e,o)||!p(e,n))break;alert("You must pass.")}else alert("NPC must pass.")}function k(e,n){setTimeout(()=>{const t=l(e,n);0==t?alert("Draw"):t>0?alert("Win"):alert("Lose")},100)}class N{constructor(){this.scoringAlgorithm="mcts",this.npcAlgorithm="mcts",this.yourStone=1,this.npcEnabled=!0,this.searchDepth=5,this.scoreVisible=!1,this.div=document.createElement("div"),this.board=m(),this.stone=1,this.updateBoard(!0,this.scoreVisible)}updateBoard(e,n){const t=this.div;t.innerHTML="",t.appendChild(this.createBoardDom(e,n)),t.append(this.createInfoDom()),t.append(this.createScoreDom()),t.append(this.createControllerDom())}createControllerDom(){const e=document.createElement("table");{const n=document.createElement("tr"),t=document.createElement("label");t.innerHTML="Score",t.htmlFor="score-check";const o=document.createElement("th");o.appendChild(t),n.appendChild(o);const r=document.createElement("input");r.id="score-check",r.type="checkbox",r.onchange=()=>{r.checked?this.scoreVisible=!0:this.scoreVisible=!1,this.updateBoard(!0,this.scoreVisible)},r.checked=this.scoreVisible,r.className="control";const i=document.createElement("td");i.appendChild(r),n.appendChild(i);const c=document.createElement("select");c.id="score-algorithm";for(const e of["greedy","alphabeta","mcts"]){const n=document.createElement("option");n.innerHTML=e.toString(),n.value=e.toString(),c.appendChild(n),this.scoringAlgorithm==e&&(n.selected=!0)}c.onchange=()=>{for(const e of c.selectedOptions){this.scoringAlgorithm=e.value;break}console.log("algorithm: ",this.scoringAlgorithm),this.scoreVisible&&this.updateBoard(!0,this.scoreVisible)},c.className="control";const s=document.createElement("td");s.appendChild(c),n.appendChild(s),e.appendChild(n)}{const n=document.createElement("tr"),t=document.createElement("label");t.innerHTML="NPC",t.htmlFor="npc-check";const o=document.createElement("th");o.appendChild(t),n.appendChild(o);const r=document.createElement("input");r.id="npc-check",r.type="checkbox",r.onchange=()=>{r.checked?this.npcEnabled=!0:this.npcEnabled=!1},r.checked=this.npcEnabled,r.className="control";const i=document.createElement("td");i.appendChild(r),n.appendChild(i);const c=document.createElement("select");c.id="npc-algorithm";for(const e of["greedy","alphabeta","mcts"]){const n=document.createElement("option");n.innerHTML=e.toString(),n.value=e.toString(),c.appendChild(n),this.npcAlgorithm==e&&(n.selected=!0)}c.onchange=()=>{for(const e of c.selectedOptions){this.npcAlgorithm=e.value;break}console.log("algorithm: ",this.npcAlgorithm),this.scoreVisible&&this.updateBoard(!0,this.scoreVisible)},c.className="control";const s=document.createElement("td");s.appendChild(c),n.appendChild(s),e.appendChild(n)}{const n=document.createElement("tr"),t=document.createElement("th");n.appendChild(t);const o=document.createElement("input");o.type="button",o.value="Reset",o.onclick=()=>{this.board=m(),this.stone=1,this.updateBoard(!0,this.scoreVisible)},o.className="control";const r=document.createElement("td");r.appendChild(o),n.appendChild(r),e.appendChild(n)}return e}createInfoDom(){const e=document.createElement("table");{const n=document.createElement("tr"),t=document.createElement("th");t.className="info",t.innerHTML="Next",n.appendChild(t);const o=document.createElement("th");o.className="info",o.innerHTML="Turn",n.appendChild(o);const r=document.createElement("th");r.className="info",r.innerHTML="Version",n.appendChild(r),e.appendChild(n)}{0===this.stone||p(this.board,this.stone)||p(this.board,h(this.stone))||(this.stone=0);const n=document.createElement("tr"),t=document.createElement("td");1==this.stone?(t.className="b info",t.innerHTML="●"):this.stone==o?(t.className="w info",t.innerHTML="●"):(t.innerHTML="Game End",t.className="info"),n.appendChild(t);const r=document.createElement("td");r.className="info";const i=a(this.board);r.innerHTML=(i-3).toString(),n.appendChild(r);const c=document.createElement("td");c.className="info",c.innerHTML="0.1",n.appendChild(c),e.appendChild(n)}return e}createScoreDom(){const e=document.createElement("table");{const n=document.createElement("tr"),t=document.createElement("th");t.className="score",t.innerHTML="Name",n.appendChild(t);const o=document.createElement("th");o.className="score",o.innerHTML="Black",n.appendChild(o);const r=document.createElement("th");r.className="score",r.innerHTML="White",n.appendChild(r),e.appendChild(n)}const n=s(this.board,1),t=s(this.board,o);{const o=document.createElement("tr"),r=document.createElement("td");r.className="score",r.innerHTML="Stones",o.appendChild(r);const i=document.createElement("td");i.className="score",i.innerHTML=n.toString(),o.appendChild(i);const c=document.createElement("td");c.className="score",c.innerHTML=t.toString(),o.appendChild(c),e.appendChild(o)}{const o=document.createElement("tr"),r=document.createElement("td");r.className="score",r.innerHTML="Score",o.appendChild(r);const i=document.createElement("td");i.className="score",i.innerHTML=(n-t).toString(),o.appendChild(i);const c=document.createElement("td");c.className="score",c.innerHTML=(t-n).toString(),o.appendChild(c),e.appendChild(o)}return e}createBoardDom(e,n){const t=this.yourStone,r=document.createElement("table");r.className="board";const c=this.stone;let s;if(n&&e)if(console.log("scoring",this.scoringAlgorithm),"mcts"===this.scoringAlgorithm){const e=1e4;s=w(this.board,c,e)}else if("alphabeta"===this.scoringAlgorithm){const e=5;s=b(this.board,c,e)}else{if("greedy"!==this.scoringAlgorithm)throw new Error("algorithm: "+this.scoringAlgorithm);s=y(this.board,c)}else s=e?i(this.board,c):[];let a=0,l=-65;for(const e of s){const[n,t,o]=e;l=Math.max(l,t),a+=o}for(let e=0;e<8;++e){const n=document.createElement("tr");n.className="board",r.appendChild(n);for(let r=0;r<8;++r){const i=document.createElement("td"),a=this.board[e][r];if(1===a)i.innerHTML="●",i.className="board b";else if(a==o)i.innerHTML="●",i.className="board w";else{i.className="board";let n=null;for(const t of s){const[o,i]=t[0];if(o===e&&i===r){n=t[1];break}}if(null!=n){const s=document.createElement("input");s.type="button",-65==n?(s.className="candidate",s.value=""):n==l?1===c?(s.className="best-candidate-b",s.value=Math.round(n).toString()):c===o&&(s.className="best-candidate-w",s.value=Math.round(n).toString()):1===c?(s.className="candidate-b",s.value=Math.round(n).toString()):c===o&&(s.className="candidate-w",s.value=Math.round(n).toString()),s.onclick=()=>{if(A(this.board,this.stone,e,r)<=0)return;this.updateBoard(!1,!1);const n=h(this.stone);if(!p(this.board,this.stone)&&!p(this.board,n))return this.stone=0,void k(this.board,t);this.updateBoard(!1,!1),setTimeout(()=>{this.npcEnabled?(x(this.board,n,this.npcAlgorithm),p(this.board,this.stone)||(this.stone=0,k(this.board,t))):p(this.board,n)?this.stone=n:p(this.board,this.stone)||(this.stone=0),this.updateBoard(!0,this.scoreVisible)},10)},i.appendChild(s)}}n.appendChild(i)}}return r}}t(1);window.addEventListener("DOMContentLoaded",()=>{!function(){const e=new N;document.body.appendChild(e.div)}()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,