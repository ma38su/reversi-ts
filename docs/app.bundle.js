!function(e){var n={};function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)t.d(o,r,function(n){return e[n]}.bind(null,r));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=4)}([function(e,n,t){"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=function(e,n){var t=e[1]||"",o=e[3];if(!o)return t;if(n&&"function"==typeof btoa){var r=(c=o,a=btoa(unescape(encodeURIComponent(JSON.stringify(c)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(s," */")),i=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([r]).join("\n")}var c,a,s;return[t].join("\n")}(n,e);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(r[c]=!0)}for(var a=0;a<e.length;a++){var s=[].concat(e[a]);o&&r[s[0]]||(t&&(s[2]?s[2]="".concat(t," and ").concat(s[2]):s[2]=t),n.push(s))}},n}},function(e,n,t){var o=t(2),r=t(3);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var i={insert:"head",singleton:!1};o(r,i);e.exports=r.locals||{}},function(e,n,t){"use strict";var o,r=function(){return void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o},i=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),c=[];function a(e){for(var n=-1,t=0;t<c.length;t++)if(c[t].identifier===e){n=t;break}return n}function s(e,n){for(var t={},o=[],r=0;r<e.length;r++){var i=e[r],s=n.base?i[0]+n.base:i[0],d=t[s]||0,l="".concat(s," ").concat(d);t[s]=d+1;var A=a(l),h={css:i[1],media:i[2],sourceMap:i[3]};-1!==A?(c[A].references++,c[A].updater(h)):c.push({identifier:l,updater:m(h,n),references:1}),o.push(l)}return o}function d(e){var n=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var r=t.nc;r&&(o.nonce=r)}if(Object.keys(o).forEach((function(e){n.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(n);else{var c=i(e.insert||"head");if(!c)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");c.appendChild(n)}return n}var l,A=(l=[],function(e,n){return l[e]=n,l.filter(Boolean).join("\n")});function h(e,n,t,o){var r=t?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=A(n,r);else{var i=document.createTextNode(r),c=e.childNodes;c[n]&&e.removeChild(c[n]),c.length?e.insertBefore(i,c[n]):e.appendChild(i)}}function u(e,n,t){var o=t.css,r=t.media,i=t.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),i&&btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var f=null,p=0;function m(e,n){var t,o,r;if(n.singleton){var i=p++;t=f||(f=d(n)),o=h.bind(null,t,i,!1),r=h.bind(null,t,i,!0)}else t=d(n),o=u.bind(null,t,n),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return o(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;o(e=n)}else r()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=r());var t=s(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<t.length;o++){var r=a(t[o]);c[r].references--}for(var i=s(e,n),d=0;d<t.length;d++){var l=a(t[d]);0===c[l].references&&(c[l].updater(),c.splice(l,1))}t=i}}}},function(e,n,t){"use strict";t.r(n);var o=t(0),r=t.n(o)()(!0);r.push([e.i,"body {\n    margin: 0;\n    overflow: hidden;\n    background-color: #AAA;\n}\n\ninput {\n    vertical-align: middle;\n}\n\n.control {\n    background-color: #CCC;\n    color: black;\n    border: solid 0;\n    font-size: 10pt;\n    vertical-align: middle;\n}\n\n.b {\n    color: #000;\n    font-size: 16pt;\n    text-align: center;\n}\n\n.w {\n    color: #fff;\n    font-size: 16pt;\n    text-align: center;\n}\n\n.candidate {\n    background-color: #0A0;\n    border: solid 0;\n    font-size: 12pt;\n    color: green;\n    width: 100%;\n    height: 100%;\n}\n\n.candidate-b {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #0A0;\n    width: 100%;\n    height: 100%;\n    color: #222;\n}\n.candidate-w {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #0A0;\n    width: 100%;\n    height: 100%;\n    color: #DDD;\n}\n\n.best-candidate-b {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #0C0;\n    width: 100%;\n    height: 100%;\n    color: #000;\n    font-weight: bold;\n}\n.best-candidate-w {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #0C0;\n    width: 100%;\n    height: 100%;\n    color: #fff;\n    font-weight: bold;\n}\n\nul {\n    list-style-type: none;\n}\n\n.score {\n    color: #000;\n}\n\ntable.board {\n    float: left;\n    padding: 0px;\n    margin: 5px;\n    border-collapse: none;\n    border-spacing: 0;\n}\n\ntr.board {\n    border-collapse: none;\n    border-spacing: 0;\n    padding: 0px;\n    margin: 0px;\n}\n\ntd.board {\n    width: 5;\n    height: 5;\n    padding: 0px;\n    margin: 1px;\n    width: 50px;\n    height: 50px;\n    background-color: green;\n    border: 1px solid #bbb;\n    text-align: center;\n}\n\nth.score, td.score {\n    width: 75px;\n    font-size: 10pt;\n    text-align: right;\n}\n\nth.info, td.info {\n    width: 75px;\n    font-size: 10pt;\n    text-align: right;\n}","",{version:3,sources:["style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,gBAAgB;IAChB,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;IACtB,YAAY;IACZ,eAAe;IACf,eAAe;IACf,sBAAsB;AAC1B;;AAEA;IACI,WAAW;IACX,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,sBAAsB;IACtB,eAAe;IACf,eAAe;IACf,YAAY;IACZ,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,eAAe;IACf,eAAe;IACf,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,WAAW;AACf;AACA;IACI,eAAe;IACf,eAAe;IACf,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,eAAe;IACf,eAAe;IACf,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,WAAW;IACX,iBAAiB;AACrB;AACA;IACI,eAAe;IACf,eAAe;IACf,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,WAAW;IACX,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;IACI,qBAAqB;IACrB,iBAAiB;IACjB,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,QAAQ;IACR,SAAS;IACT,YAAY;IACZ,WAAW;IACX,WAAW;IACX,YAAY;IACZ,uBAAuB;IACvB,sBAAsB;IACtB,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,eAAe;IACf,iBAAiB;AACrB",file:"style.css",sourcesContent:["body {\n    margin: 0;\n    overflow: hidden;\n    background-color: #AAA;\n}\n\ninput {\n    vertical-align: middle;\n}\n\n.control {\n    background-color: #CCC;\n    color: black;\n    border: solid 0;\n    font-size: 10pt;\n    vertical-align: middle;\n}\n\n.b {\n    color: #000;\n    font-size: 16pt;\n    text-align: center;\n}\n\n.w {\n    color: #fff;\n    font-size: 16pt;\n    text-align: center;\n}\n\n.candidate {\n    background-color: #0A0;\n    border: solid 0;\n    font-size: 12pt;\n    color: green;\n    width: 100%;\n    height: 100%;\n}\n\n.candidate-b {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #0A0;\n    width: 100%;\n    height: 100%;\n    color: #222;\n}\n.candidate-w {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #0A0;\n    width: 100%;\n    height: 100%;\n    color: #DDD;\n}\n\n.best-candidate-b {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #0C0;\n    width: 100%;\n    height: 100%;\n    color: #000;\n    font-weight: bold;\n}\n.best-candidate-w {\n    border: solid 0;\n    font-size: 12pt;\n    background-color: #0C0;\n    width: 100%;\n    height: 100%;\n    color: #fff;\n    font-weight: bold;\n}\n\nul {\n    list-style-type: none;\n}\n\n.score {\n    color: #000;\n}\n\ntable.board {\n    float: left;\n    padding: 0px;\n    margin: 5px;\n    border-collapse: none;\n    border-spacing: 0;\n}\n\ntr.board {\n    border-collapse: none;\n    border-spacing: 0;\n    padding: 0px;\n    margin: 0px;\n}\n\ntd.board {\n    width: 5;\n    height: 5;\n    padding: 0px;\n    margin: 1px;\n    width: 50px;\n    height: 50px;\n    background-color: green;\n    border: 1px solid #bbb;\n    text-align: center;\n}\n\nth.score, td.score {\n    width: 75px;\n    font-size: 10pt;\n    text-align: right;\n}\n\nth.info, td.info {\n    width: 75px;\n    font-size: 10pt;\n    text-align: right;\n}"]}]),n.default=r},function(e,n,t){"use strict";t.r(n);const o=-1,r=[[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]];function i(e,n){return 0<=e&&e<8&&0<=n&&n<8}function c(e){const n=new Array(8);for(let t=0;t<8;++t){const o=e[t],r=new Array(8);for(let e=0;e<8;++e)r[e]=o[e];n[t]=r}return n}function a(e,n,t,o){if(0!=e[t][o])return 0;let c=0;for(const a of r){const[r,d]=a;let l=1;for(;;){const a=t+r*l,A=o+d*l;if(!i(a,A))break;const h=e[a][A];if(0===h)break;if(h===n){l>1&&(s(e,h,t,o,r,d,l),c+=l-1);break}l++}}return c>0&&(e[t][o]=n),c}function s(e,n,t,o,r,i,c){for(let a=1;a<c;++a)o+=i,e[t+=r][o]=n}function d(e){return-1*e}function l(e,n){let t=0;for(let o=0;o<8;++o)for(let r=0;r<8;++r){const i=e[o][r];i===n?++t:0!==i&&--t}return t}function A(e,n,t){const o=d(n);let r=0,i=-65,s=c(e);for(let d=0;d<8;++d)for(let u=0;u<8;++u){if(!(a(s,n,d,u)<=0)){if(t<=0){++r;const e=l(s,n);i=Math.max(i,e)}else{const[e,c]=h(s,n,t-1);if(r+=c,e<65)i=Math.max(i,e);else{const[e,c]=A(s,n,t-1);r+=c,e>-65?i=Math.max(i,e):m(s,n)||m(s,o)||(i=Math.max(i,l(s,n)),++r)}}s=c(e)}}return[i,r]}function h(e,n,t){const o=d(n);let r=0,i=65,s=c(e);for(let d=0;d<8;++d)for(let u=0;u<8;++u){if(!(a(s,o,d,u)<=0)){if(t<=0)i=Math.min(i,l(s,n)),++r;else{const[e,c]=A(s,n,t-1);if(r+=c,e>-65)i=Math.min(i,e);else{const[e,c]=h(s,n,t-1);r+=c,e<65?i=Math.min(i,e):m(s,n)||m(s,o)||(i=Math.min(i,l(s,n)),++r)}}s=c(e)}}return[i,r]}function u(e,n,t,o){const r=d(n);let i=0,s=-65,A=c(e);for(let d=0;d<8;++d)for(let h=0;h<8;++h){if(!(a(A,n,d,h)<=0)){if(t<=0){++i;const e=l(A,n);if(e>o)return[e,i];s=Math.max(s,e)}else{const[e,c]=f(A,n,t-1,s);if(i+=c,e<65){if(e>o)return[e,i];s=Math.max(s,e)}else{const[e,o]=u(A,n,t-1,65);i+=o,e>-65?s=Math.max(s,e):m(A,n)||m(A,r)||(s=Math.max(s,l(A,n)),++i)}}A=c(e)}}return[s,i]}function f(e,n,t,o){const r=d(n);let i=0,s=65,A=c(e);for(let d=0;d<8;++d)for(let f=0;f<8;++f){if(!(a(A,r,d,f)<=0)){if(t<=0){++i;const e=l(A,n);if(e<o)return[e,i];s=Math.min(s,e)}else{const[e,c]=u(A,n,t-1,s);if(i+=c,e>-65){if(e<o)return[e,i];s=Math.min(s,e)}else{const[e,o]=h(A,n,t-1);i+=o,e<65?s=Math.min(s,e):m(A,n)||m(A,r)||(s=Math.min(s,l(A,n)),++i)}}A=c(e)}}return[s,i]}function p(e,n,t){const o=d(n),r=[];let i=c(e);for(let s=0;s<8;++s)for(let d=0;d<8;++d){if(!(a(i,n,s,d)<=0)){if(t<=0)r.push([[s,d],-65,1]);else{const[e,c]=f(i,n,t-1,-65);if(e<65)r.push([[s,d],e,c]);else{const[e,c]=A(i,n,t-1);e>-65?r.push([[s,d],e,c]):m(i,n)||m(i,o)||r.push([[s,d],l(i,n),1])}}i=c(e)}}return r}function m(e,n){for(let t=0;t<8;++t)for(let o=0;o<8;++o)if(0==e[t][o])for(const c of r){const[r,a]=c;let s=1;for(;;){const c=t+r*s,d=o+a*s;if(!i(c,d))break;const l=e[c][d];if(0===l)break;if(l===n){if(s>1)return!0;break}s++}}return!1}function b(e,n,t){const o=p(e,n,t);let r=null,i=-65;for(const e of o){const[n,t]=e;i<t&&(i=t,r=n)}return r}function C(e,n){const t=d(n);for(m(e,n)||alert("NPC must pass.");;){const o=b(e,n,5);if(!o)return void alert("illegal state 1");const[r,i]=o;if(a(e,n,r,i)<=0&&alert("illegal state 2"),m(e,t)||!m(e,n))break;alert("You must pass.")}}function g(e,n){setTimeout(()=>{const t=l(e,n);0==t?alert("Draw"):t>0?alert("Win"):alert("Lose")},100)}class I{constructor(e){this.yourStone=1,this.npcEnabled=!0,this.searchDepth=5,this.scoreVisible=!1,this.div=e,this.board=this.newBoard(),this.stone=1,this.updateBoard(!0,this.scoreVisible)}newBoard(){const e=new Array(8);for(let n=0;n<e.length;++n)e[n]=new Array(8).fill(0);return e[3][3]=1,e[3][4]=o,e[4][3]=o,e[4][4]=1,e}stones(e){let n=0;for(let t=0;t<8;++t)for(let o=0;o<8;++o)this.board[t][o]==e&&++n;return n}updateBoard(e,n){const t=this.div;t.innerHTML="",t.appendChild(this.createBoardDom(e,n)),t.append(this.createInfoDom()),t.append(this.createScoreDom()),t.append(this.controllerDom())}controllerDom(){const e=document.createElement("table");{const n=document.createElement("tr"),t=document.createElement("label");t.innerHTML="NPC",t.htmlFor="npc-check";const o=document.createElement("th");o.appendChild(t),n.appendChild(o);const r=document.createElement("input");r.id="npc-check",r.type="checkbox",r.onchange=()=>{r.checked?this.npcEnabled=!0:this.npcEnabled=!1},r.checked=this.npcEnabled,r.className="control";const i=document.createElement("td");i.appendChild(r),n.appendChild(i),e.appendChild(n)}{const n=document.createElement("tr"),t=document.createElement("label");t.innerHTML="Score",t.htmlFor="score-check";const o=document.createElement("th");o.appendChild(t),n.appendChild(o);const r=document.createElement("input");r.id="score-check",r.type="checkbox",r.onchange=()=>{r.checked?this.scoreVisible=!0:this.scoreVisible=!1,this.updateBoard(!0,this.scoreVisible)},r.checked=this.scoreVisible,r.className="control";const i=document.createElement("td");i.appendChild(r),n.appendChild(i),e.appendChild(n)}{const n=document.createElement("tr"),t=document.createElement("label");t.innerHTML="Depth",t.htmlFor="depth-input";const o=document.createElement("th");o.appendChild(t),n.appendChild(o);const r=document.createElement("select");r.id="depth";for(let e of[1,2,3,4,5,6,7,8]){const n=document.createElement("option");n.innerHTML=e.toString(),n.value=e.toString(),r.appendChild(n),this.searchDepth==e&&(n.selected=!0)}r.onchange=()=>{for(const e of r.selectedOptions){this.searchDepth=parseInt(e.value);break}console.log("search-depth: ",this.searchDepth),this.scoreVisible&&this.updateBoard(!0,this.scoreVisible)},r.className="control";const i=document.createElement("td");i.appendChild(r),n.appendChild(i),e.appendChild(n)}{const n=document.createElement("tr"),t=document.createElement("th");n.appendChild(t);const o=document.createElement("input");o.type="button",o.value="Reset",o.onclick=()=>{this.board=this.newBoard(),this.stone=1,this.updateBoard(!0,this.scoreVisible)},o.className="control";const r=document.createElement("td");r.appendChild(o),n.appendChild(r),e.appendChild(n)}return e}createInfoDom(){const e=document.createElement("table");{const n=document.createElement("tr"),t=document.createElement("th");t.className="info",t.innerHTML="Next",n.appendChild(t);const o=document.createElement("th");o.className="info",o.innerHTML="Turn",n.appendChild(o),e.appendChild(n)}const n=this.stones(1),t=this.stones(o);{0===this.stone||m(this.board,this.stone)||m(this.board,d(this.stone))||(this.stone=0);const r=document.createElement("tr"),i=document.createElement("td");1==this.stone?(i.className="b info",i.innerHTML="●"):this.stone==o?(i.className="w info",i.innerHTML="●"):(i.innerHTML="Game End",i.className="info"),r.appendChild(i);const c=document.createElement("td");c.className="info",c.innerHTML=(n+t-3).toString(),r.appendChild(c),e.appendChild(r)}return e}createScoreDom(){const e=document.createElement("table");{const n=document.createElement("tr"),t=document.createElement("th");t.className="score",t.innerHTML="Name",n.appendChild(t);const o=document.createElement("th");o.className="score",o.innerHTML="Black",n.appendChild(o);const r=document.createElement("th");r.className="score",r.innerHTML="White",n.appendChild(r),e.appendChild(n)}const n=this.stones(1),t=this.stones(o);{const o=document.createElement("tr"),r=document.createElement("td");r.className="score",r.innerHTML="Stones",o.appendChild(r);const i=document.createElement("td");i.className="score",i.innerHTML=n.toString(),o.appendChild(i);const c=document.createElement("td");c.className="score",c.innerHTML=t.toString(),o.appendChild(c),e.appendChild(o)}{const o=document.createElement("tr"),r=document.createElement("td");r.className="score",r.innerHTML="Score",o.appendChild(r);const i=document.createElement("td");i.className="score",i.innerHTML=(n-t).toString(),o.appendChild(i);const c=document.createElement("td");c.className="score",c.innerHTML=(t-n).toString(),o.appendChild(c),e.appendChild(o)}return e}createBoardDom(e,n){const t=this.yourStone,r=document.createElement("table");r.className="board";const i=this.stone;let c;c=n&&e?p(this.board,i,this.searchDepth):e?p(this.board,i,0):[];let s=0,l=-65;for(const e of c){const[n,t,o]=e;l=Math.max(l,t),s+=o}for(let e=0;e<8;++e){const n=document.createElement("tr");n.className="board",r.appendChild(n);for(let r=0;r<8;++r){const s=document.createElement("td"),A=this.board[e][r];if(1===A)s.innerHTML="●",s.className="board b";else if(A==o)s.innerHTML="●",s.className="board w";else{s.className="board";let n=null;for(const t of c){const[o,i]=t[0];if(o===e&&i===r){n=t[1];break}}if(null!=n){const c=document.createElement("input");c.type="button",-65==n?(c.className="candidate",c.value=""):n==l?1===i?(c.className="best-candidate-b",c.value=""+n):i===o&&(c.className="best-candidate-w",c.value=""+n):1===i?(c.className="candidate-b",c.value=""+n):i===o&&(c.className="candidate-w",c.value=""+n),c.onclick=()=>{if(a(this.board,this.stone,e,r)<=0)return;this.updateBoard(!1,!1);const n=d(this.stone);if(!m(this.board,this.stone)&&!m(this.board,n))return this.stone=0,void g(this.board,t);this.updateBoard(!1,!1),setTimeout(()=>{this.npcEnabled?(C(this.board,n),m(this.board,this.stone)||(this.stone=0,g(this.board,t))):m(this.board,n)?this.stone=n:m(this.board,this.stone)||(this.stone=0),this.updateBoard(!0,this.scoreVisible)},10)},s.appendChild(c)}}n.appendChild(s)}}return r}}t(1);window.addEventListener("DOMContentLoaded",()=>{!function(){const e=document.createElement("div");new I(e);document.body.appendChild(e)}()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,